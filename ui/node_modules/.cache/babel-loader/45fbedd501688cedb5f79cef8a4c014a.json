{"ast":null,"code":"\"use strict\";\n\nvar ono = require(\"ono\"),\n    $Ref = require(\"./ref\"),\n    url = require(\"./util/url\");\n\nmodule.exports = $Refs;\n/**\r\n * This class is a map of JSON references and their resolved values.\r\n */\n\nfunction $Refs() {\n  /**\r\n   * Indicates whether the schema contains any circular references.\r\n   *\r\n   * @type {boolean}\r\n   */\n  this.circular = false;\n  /**\r\n   * A map of paths/urls to {@link $Ref} objects\r\n   *\r\n   * @type {object}\r\n   * @protected\r\n   */\n\n  this._$refs = {};\n  /**\r\n   * The {@link $Ref} object that is the root of the JSON schema.\r\n   *\r\n   * @type {$Ref}\r\n   * @protected\r\n   */\n\n  this._root$Ref = null;\n}\n/**\r\n * Returns the paths of all the files/URLs that are referenced by the JSON schema,\r\n * including the schema itself.\r\n *\r\n * @param {...string|string[]} [types] - Only return paths of the given types (\"file\", \"http\", etc.)\r\n * @returns {string[]}\r\n */\n\n\n$Refs.prototype.paths = function (types) {\n  var paths = getPaths(this._$refs, arguments);\n  return paths.map(function (path) {\n    return path.decoded;\n  });\n};\n/**\r\n * Returns the map of JSON references and their resolved values.\r\n *\r\n * @param {...string|string[]} [types] - Only return references of the given types (\"file\", \"http\", etc.)\r\n * @returns {object}\r\n */\n\n\n$Refs.prototype.values = function (types) {\n  var $refs = this._$refs;\n  var paths = getPaths($refs, arguments);\n  return paths.reduce(function (obj, path) {\n    obj[path.decoded] = $refs[path.encoded].value;\n    return obj;\n  }, {});\n};\n/**\r\n * Returns a POJO (plain old JavaScript object) for serialization as JSON.\r\n *\r\n * @returns {object}\r\n */\n\n\n$Refs.prototype.toJSON = $Refs.prototype.values;\n/**\r\n * Determines whether the given JSON reference exists.\r\n *\r\n * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash\r\n * @param {$RefParserOptions} [options]\r\n * @returns {boolean}\r\n */\n\n$Refs.prototype.exists = function (path, options) {\n  try {\n    this._resolve(path, options);\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n/**\r\n * Resolves the given JSON reference and returns the resolved value.\r\n *\r\n * @param {string} path - The path being resolved, with a JSON pointer in the hash\r\n * @param {$RefParserOptions} [options]\r\n * @returns {*} - Returns the resolved value\r\n */\n\n\n$Refs.prototype.get = function (path, options) {\n  return this._resolve(path, options).value;\n};\n/**\r\n * Sets the value of a nested property within this {@link $Ref#value}.\r\n * If the property, or any of its parents don't exist, they will be created.\r\n *\r\n * @param {string} path - The path of the property to set, optionally with a JSON pointer in the hash\r\n * @param {*} value - The value to assign\r\n */\n\n\n$Refs.prototype.set = function (path, value) {\n  var absPath = url.resolve(this._root$Ref.path, path);\n  var withoutHash = url.stripHash(absPath);\n  var $ref = this._$refs[withoutHash];\n\n  if (!$ref) {\n    throw ono('Error resolving $ref pointer \"%s\". \\n\"%s\" not found.', path, withoutHash);\n  }\n\n  $ref.set(absPath, value);\n};\n/**\r\n * Creates a new {@link $Ref} object and adds it to this {@link $Refs} object.\r\n *\r\n * @param {string} path  - The file path or URL of the referenced file\r\n */\n\n\n$Refs.prototype._add = function (path) {\n  var withoutHash = url.stripHash(path);\n  var $ref = new $Ref();\n  $ref.path = withoutHash;\n  $ref.$refs = this;\n  this._$refs[withoutHash] = $ref;\n  this._root$Ref = this._root$Ref || $ref;\n  return $ref;\n};\n/**\r\n * Resolves the given JSON reference.\r\n *\r\n * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash\r\n * @param {$RefParserOptions} [options]\r\n * @returns {Pointer}\r\n * @protected\r\n */\n\n\n$Refs.prototype._resolve = function (path, options) {\n  var absPath = url.resolve(this._root$Ref.path, path);\n  var withoutHash = url.stripHash(absPath);\n  var $ref = this._$refs[withoutHash];\n\n  if (!$ref) {\n    throw ono('Error resolving $ref pointer \"%s\". \\n\"%s\" not found.', path, withoutHash);\n  }\n\n  return $ref.resolve(absPath, options, path);\n};\n/**\r\n * Returns the specified {@link $Ref} object, or undefined.\r\n *\r\n * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash\r\n * @returns {$Ref|undefined}\r\n * @protected\r\n */\n\n\n$Refs.prototype._get$Ref = function (path) {\n  path = url.resolve(this._root$Ref.path, path);\n  var withoutHash = url.stripHash(path);\n  return this._$refs[withoutHash];\n};\n/**\r\n * Returns the encoded and decoded paths keys of the given object.\r\n *\r\n * @param {object} $refs - The object whose keys are URL-encoded paths\r\n * @param {...string|string[]} [types] - Only return paths of the given types (\"file\", \"http\", etc.)\r\n * @returns {object[]}\r\n */\n\n\nfunction getPaths($refs, types) {\n  var paths = Object.keys($refs); // Filter the paths by type\n\n  types = Array.isArray(types[0]) ? types[0] : Array.prototype.slice.call(types);\n\n  if (types.length > 0 && types[0]) {\n    paths = paths.filter(function (key) {\n      return types.indexOf($refs[key].pathType) !== -1;\n    });\n  } // Decode local filesystem paths\n\n\n  return paths.map(function (path) {\n    return {\n      encoded: path,\n      decoded: $refs[path].pathType === \"file\" ? url.toFileSystemPath(path, true) : path\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"script"}