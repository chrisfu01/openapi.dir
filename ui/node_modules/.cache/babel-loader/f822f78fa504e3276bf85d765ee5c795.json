{"ast":null,"code":"\"use strict\";\n/**\n * Returns the given plugins as an array, rather than an object map.\n * All other methods in this module expect an array of plugins rather than an object map.\n *\n * @param  {object} plugins - A map of plugin objects\n * @return {object[]}\n */\n\nexports.all = function (plugins) {\n  return Object.keys(plugins).filter(function (key) {\n    return typeof plugins[key] === \"object\";\n  }).map(function (key) {\n    plugins[key].name = key;\n    return plugins[key];\n  });\n};\n/**\n * Filters the given plugins, returning only the ones return `true` for the given method.\n *\n * @param  {object[]} plugins - An array of plugin objects\n * @param  {string}   method  - The name of the filter method to invoke for each plugin\n * @param  {object}   file    - A file info object, which will be passed to each method\n * @return {object[]}\n */\n\n\nexports.filter = function (plugins, method, file) {\n  return plugins.filter(function (plugin) {\n    return !!getResult(plugin, method, file);\n  });\n};\n/**\n * Sorts the given plugins, in place, by their `order` property.\n *\n * @param {object[]} plugins - An array of plugin objects\n * @returns {object[]}\n */\n\n\nexports.sort = function (plugins) {\n  plugins.forEach(function (plugin) {\n    plugin.order = plugin.order || Number.MAX_SAFE_INTEGER;\n  });\n  return plugins.sort(function (a, b) {\n    return a.order - b.order;\n  });\n};\n/**\n * Runs the specified method of the given plugins, in order, until one of them returns a successful result.\n * Each method can return a synchronous value, a Promise, or call an error-first callback.\n * If the promise resolves successfully, or the callback is called without an error, then the result\n * is immediately returned and no further plugins are called.\n * If the promise rejects, or the callback is called with an error, then the next plugin is called.\n * If ALL plugins fail, then the last error is thrown.\n *\n * @param {object[]}  plugins - An array of plugin objects\n * @param {string}    method  - The name of the method to invoke for each plugin\n * @param {object}    file    - A file info object, which will be passed to each method\n * @returns {Promise}\n */\n\n\nexports.run = function (plugins, method, file) {\n  var plugin,\n      lastError,\n      index = 0;\n  return new Promise(function (resolve, reject) {\n    runNextPlugin();\n\n    function runNextPlugin() {\n      plugin = plugins[index++];\n\n      if (!plugin) {\n        // There are no more functions, so re-throw the last error\n        return reject(lastError);\n      }\n\n      try {\n        // console.log('  %s', plugin.name);\n        var result = getResult(plugin, method, file, callback);\n\n        if (result && typeof result.then === \"function\") {\n          // A promise was returned\n          result.then(onSuccess, onError);\n        } else if (result !== undefined) {\n          // A synchronous result was returned\n          onSuccess(result);\n        } // else { the callback will be called }\n\n      } catch (e) {\n        onError(e);\n      }\n    }\n\n    function callback(err, result) {\n      if (err) {\n        onError(err);\n      } else {\n        onSuccess(result);\n      }\n    }\n\n    function onSuccess(result) {\n      // console.log('    success');\n      resolve({\n        plugin: plugin,\n        result: result\n      });\n    }\n\n    function onError(err) {\n      // console.log('    %s', err.message || err);\n      lastError = err;\n      runNextPlugin();\n    }\n  });\n};\n/**\n * Returns the value of the given property.\n * If the property is a function, then the result of the function is returned.\n * If the value is a RegExp, then it will be tested against the file URL.\n * If the value is an aray, then it will be compared against the file extension.\n *\n * @param   {object}   obj        - The object whose property/method is called\n * @param   {string}   prop       - The name of the property/method to invoke\n * @param   {object}   file       - A file info object, which will be passed to the method\n * @param   {function} [callback] - A callback function, which will be passed to the method\n * @returns {*}\n */\n\n\nfunction getResult(obj, prop, file, callback) {\n  var value = obj[prop];\n\n  if (typeof value === \"function\") {\n    return value.apply(obj, [file, callback]);\n  }\n\n  if (!callback) {\n    // The synchronous plugin functions (canParse and canRead)\n    // allow a \"shorthand\" syntax, where the user can match\n    // files by RegExp or by file extension.\n    if (value instanceof RegExp) {\n      return value.test(file.url);\n    } else if (typeof value === \"string\") {\n      return value === file.extension;\n    } else if (Array.isArray(value)) {\n      return value.indexOf(file.extension) !== -1;\n    }\n  }\n\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}