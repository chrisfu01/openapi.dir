{"ast":null,"code":"import _classCallCheck from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/chrisfu/openapi.portal/ui/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chrisfu/openapi.portal/ui/src/containers/login/Login.js\";\nimport React, { Component, Fragment } from 'react';\nimport { push } from 'connected-react-router';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport validator from 'validator';\nimport FormValidator from '../../utils/FormValidator';\nimport { authenticate as _authenticate } from '../../actions/apiActions';\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      email: '',\n      password: '',\n      validation: null\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this)); // create validation rules \n\n    _this.formValidator = new FormValidator([{\n      field: 'email',\n      method: validator.isEmpty,\n      validWhen: false\n    }, {\n      field: 'email',\n      method: validator.isEmail,\n      validWhen: true\n    }, {\n      field: 'password',\n      method: validator.isEmpty,\n      validWhen: false\n    }]);\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.user && !prevProps.user) {\n        this.props.myProfile();\n      }\n    }\n  }, {\n    key: \"renderLoginError\",\n    value: function renderLoginError() {\n      if (!this.props.loginError) return null;\n      return React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Invalid email or/and password\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"section\", {\n        className: \"api-section contact-section px-md-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row d-flex mb-5 contact-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-9 offset-md-3 mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Login\"))), React.createElement(\"div\", {\n        className: \"row block-9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6  col-sm-12 offset-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.renderLoginError(), React.createElement(\"form\", {\n        action: \"#\",\n        className: \"bg-light p-5 contact-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: function onChange(e) {\n          return _this2.handleChange(e, 'email');\n        },\n        type: \"text\",\n        className: classnames(\"form-control\", {\n          \"is-invalid\": this.state.validation && this.state.validation.email.isInvalid\n        }),\n        placeholder: \"Your Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: function onChange(e) {\n          return _this2.handleChange(e, 'password');\n        },\n        type: \"password\",\n        className: classnames(\"form-control\", {\n          \"is-invalid\": this.state.validation && this.state.validation.password.isInvalid\n        }),\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"button\",\n        onClick: this.handleSubmit,\n        value: \"Submit\",\n        className: \"btn btn-primary py-3 px-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })))))));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      // validate the form \n      var validation = this.formValidator.validate(this.state);\n      this.setState({\n        validation: validation\n      });\n\n      if (validation.isValid) {\n        this.props.authenticate(this.state.email, this.state.password);\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event, field) {\n      switch (field) {\n        case 'email':\n          this.setState({\n            email: event.target.value\n          });\n          break;\n\n        case 'password':\n          this.setState({\n            password: event.target.value\n          });\n          break;\n      }\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var auth = _ref.auth;\n  return {\n    user: auth.user,\n    loginError: auth.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    myProfile: function myProfile() {\n      return push('/my-profile');\n    },\n    authenticate: function authenticate(email, password) {\n      return _authenticate(email, password);\n    }\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/chrisfu/openapi.portal/ui/src/containers/login/Login.js"],"names":["React","Component","Fragment","push","bindActionCreators","connect","classnames","validator","FormValidator","authenticate","Login","props","state","email","password","validation","handleSubmit","bind","formValidator","field","method","isEmpty","validWhen","isEmail","prevProps","user","myProfile","loginError","renderLoginError","e","handleChange","isInvalid","validate","setState","isValid","event","target","value","mapStateToProps","auth","error","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { push } from 'connected-react-router'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport classnames from 'classnames'; \nimport validator from 'validator'\nimport FormValidator from '../../utils/FormValidator';\nimport { authenticate } from '../../actions/apiActions'; \n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            validation: null,\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        // create validation rules \n        this.formValidator = new FormValidator( [\n            {\n                field: 'email',\n                method: validator.isEmpty,\n                validWhen: false,\n            },\n            {\n                field: 'email',\n                method: validator.isEmail,\n                validWhen: true,\n            },\n            {\n                field: 'password',\n                method: validator.isEmpty,\n                validWhen: false,\n            },\n        ]);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.user && !prevProps.user ) {\n            this.props.myProfile();\n        }\n    }\n\n    renderLoginError() {\n        if (!this.props.loginError) return null; \n        return (\n            <div className=\"alert alert-danger\">\n                Invalid email or/and password\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <section className=\"api-section contact-section px-md-4\">\n                <div className=\"container\">\n                    <div className=\"row d-flex mb-5 contact-info\">\n                        <div className=\"col-md-9 offset-md-3 mb-4\">\n                            <h2 className=\"h3\">Login</h2>\n                        </div>\n                    </div>\n\n                    <div className=\"row block-9\">\n                        <div className=\"col-md-6  col-sm-12 offset-md-3\">\n                            {this.renderLoginError()}\n                            <form action=\"#\" className=\"bg-light p-5 contact-form\">\n                                <div className=\"form-group\">\n                                    <input onChange={e=>this.handleChange(e, 'email')} type=\"text\" className={classnames(\"form-control\", {\"is-invalid\":  this.state.validation && this.state.validation.email.isInvalid })} placeholder=\"Your Email\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <input onChange={e=>this.handleChange(e, 'password')} type=\"password\" className={classnames(\"form-control\", {\"is-invalid\":  this.state.validation && this.state.validation.password.isInvalid })} placeholder=\"Password\" />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <input type=\"button\" onClick={this.handleSubmit} value=\"Submit\" className=\"btn btn-primary py-3 px-5\" />\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n\n    handleSubmit() {\n        // validate the form \n        let validation = this.formValidator.validate(this.state);\n        this.setState({validation: validation}); \n\n        if (validation.isValid) {  \n           this.props.authenticate(this.state.email, this.state.password); \n        }\n    }\n\n    handleChange(event, field) {\n        switch (field) {\n            case 'email':\n                this.setState({ email: event.target.value });\n                break;\n            case 'password':\n                this.setState({ password: event.target.value });\n                break;\n\n        }\n    }\n}\n\nconst mapStateToProps = ({ auth }) => ({\n    user: auth.user,\n    loginError: auth.error\n})\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            myProfile: () => push('/my-profile'),\n            authenticate: (email, password) => authenticate(email, password),\n        },\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login)\n"]},"metadata":{},"sourceType":"module"}