{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.OpenAPISampler = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      var hasOwn = Object.prototype.hasOwnProperty;\n      var toString = Object.prototype.toString;\n\n      module.exports = function forEach(obj, fn, ctx) {\n        if (toString.call(fn) !== '[object Function]') {\n          throw new TypeError('iterator must be a function');\n        }\n\n        var l = obj.length;\n\n        if (l === +l) {\n          for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n          }\n        } else {\n          for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n              fn.call(ctx, obj[k], k, obj);\n            }\n          }\n        }\n      };\n    }, {}],\n    2: [function (require, module, exports) {\n      'use strict';\n\n      var each = require('foreach');\n\n      module.exports = api;\n      /**\n       * Convenience wrapper around the api.\n       * Calls `.get` when called with an `object` and a `pointer`.\n       * Calls `.set` when also called with `value`.\n       * If only supplied `object`, returns a partially applied function, mapped to the object.\n       *\n       * @param {Object} obj\n       * @param {String|Array} pointer\n       * @param value\n       * @returns {*}\n       */\n\n      function api(obj, pointer, value) {\n        // .set()\n        if (arguments.length === 3) {\n          return api.set(obj, pointer, value);\n        } // .get()\n\n\n        if (arguments.length === 2) {\n          return api.get(obj, pointer);\n        } // Return a partially applied function on `obj`.\n\n\n        var wrapped = api.bind(api, obj); // Support for oo style\n\n        for (var name in api) {\n          if (api.hasOwnProperty(name)) {\n            wrapped[name] = api[name].bind(wrapped, obj);\n          }\n        }\n\n        return wrapped;\n      }\n      /**\n       * Lookup a json pointer in an object\n       *\n       * @param {Object} obj\n       * @param {String|Array} pointer\n       * @returns {*}\n       */\n\n\n      api.get = function get(obj, pointer) {\n        var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\n\n        for (var i = 0; i < refTokens.length; ++i) {\n          var tok = refTokens[i];\n\n          if (!(typeof obj == 'object' && tok in obj)) {\n            throw new Error('Invalid reference token: ' + tok);\n          }\n\n          obj = obj[tok];\n        }\n\n        return obj;\n      };\n      /**\n       * Sets a value on an object\n       *\n       * @param {Object} obj\n       * @param {String|Array} pointer\n       * @param value\n       */\n\n\n      api.set = function set(obj, pointer, value) {\n        var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer),\n            nextTok = refTokens[0];\n\n        for (var i = 0; i < refTokens.length - 1; ++i) {\n          var tok = refTokens[i];\n\n          if (tok === '-' && Array.isArray(obj)) {\n            tok = obj.length;\n          }\n\n          nextTok = refTokens[i + 1];\n\n          if (!(tok in obj)) {\n            if (nextTok.match(/^(\\d+|-)$/)) {\n              obj[tok] = [];\n            } else {\n              obj[tok] = {};\n            }\n          }\n\n          obj = obj[tok];\n        }\n\n        if (nextTok === '-' && Array.isArray(obj)) {\n          nextTok = obj.length;\n        }\n\n        obj[nextTok] = value;\n        return this;\n      };\n      /**\n       * Removes an attribute\n       *\n       * @param {Object} obj\n       * @param {String|Array} pointer\n       */\n\n\n      api.remove = function (obj, pointer) {\n        var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\n        var finalToken = refTokens[refTokens.length - 1];\n\n        if (finalToken === undefined) {\n          throw new Error('Invalid JSON pointer for remove: \"' + pointer + '\"');\n        }\n\n        var parent = api.get(obj, refTokens.slice(0, -1));\n\n        if (Array.isArray(parent)) {\n          var index = +finalToken;\n\n          if (finalToken === '' && isNaN(index)) {\n            throw new Error('Invalid array index: \"' + finalToken + '\"');\n          }\n\n          Array.prototype.splice.call(parent, index, 1);\n        } else {\n          delete parent[finalToken];\n        }\n      };\n      /**\n       * Returns a (pointer -> value) dictionary for an object\n       *\n       * @param obj\n       * @param {function} descend\n       * @returns {}\n       */\n\n\n      api.dict = function dict(obj, descend) {\n        var results = {};\n        api.walk(obj, function (value, pointer) {\n          results[pointer] = value;\n        }, descend);\n        return results;\n      };\n      /**\n       * Iterates over an object\n       * Iterator: function (value, pointer) {}\n       *\n       * @param obj\n       * @param {function} iterator\n       * @param {function} descend\n       */\n\n\n      api.walk = function walk(obj, iterator, descend) {\n        var refTokens = [];\n\n        descend = descend || function (value) {\n          var type = Object.prototype.toString.call(value);\n          return type === '[object Object]' || type === '[object Array]';\n        };\n\n        (function next(cur) {\n          each(cur, function (value, key) {\n            refTokens.push(String(key));\n\n            if (descend(value)) {\n              next(value);\n            } else {\n              iterator(value, api.compile(refTokens));\n            }\n\n            refTokens.pop();\n          });\n        })(obj);\n      };\n      /**\n       * Tests if an object has a value for a json pointer\n       *\n       * @param obj\n       * @param pointer\n       * @returns {boolean}\n       */\n\n\n      api.has = function has(obj, pointer) {\n        try {\n          api.get(obj, pointer);\n        } catch (e) {\n          return false;\n        }\n\n        return true;\n      };\n      /**\n       * Escapes a reference token\n       *\n       * @param str\n       * @returns {string}\n       */\n\n\n      api.escape = function escape(str) {\n        return str.toString().replace(/~/g, '~0').replace(/\\//g, '~1');\n      };\n      /**\n       * Unescapes a reference token\n       *\n       * @param str\n       * @returns {string}\n       */\n\n\n      api.unescape = function unescape(str) {\n        return str.replace(/~1/g, '/').replace(/~0/g, '~');\n      };\n      /**\n       * Converts a json pointer into a array of reference tokens\n       *\n       * @param pointer\n       * @returns {Array}\n       */\n\n\n      api.parse = function parse(pointer) {\n        if (pointer === '') {\n          return [];\n        }\n\n        if (pointer.charAt(0) !== '/') {\n          throw new Error('Invalid JSON pointer: ' + pointer);\n        }\n\n        return pointer.substring(1).split(/\\//).map(api.unescape);\n      };\n      /**\n       * Builds a json pointer from a array of reference tokens\n       *\n       * @param refTokens\n       * @returns {string}\n       */\n\n\n      api.compile = function compile(refTokens) {\n        if (refTokens.length === 0) {\n          return '';\n        }\n\n        return '/' + refTokens.map(api.escape).join('/');\n      };\n    }, {\n      \"foreach\": 1\n    }],\n    3: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.allOfSample = allOfSample;\n\n      var _traverse2 = require(\"./traverse\");\n\n      var _utils = require(\"./utils\");\n\n      function _objectSpread(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i] != null ? arguments[i] : {};\n          var ownKeys = Object.keys(source);\n\n          if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n              return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n          }\n\n          ownKeys.forEach(function (key) {\n            _defineProperty(target, key, source[key]);\n          });\n        }\n\n        return target;\n      }\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      function allOfSample(into, children, options, spec) {\n        var res = (0, _traverse2.traverse)(into, options, spec);\n        var subSamples = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var subSchema = _step.value;\n\n            var _traverse = (0, _traverse2.traverse)(_objectSpread({\n              type: type\n            }, subSchema), options, spec),\n                type = _traverse.type,\n                readOnly = _traverse.readOnly,\n                writeOnly = _traverse.writeOnly,\n                value = _traverse.value;\n\n            if (res.type && type && type !== res.type) {\n              throw new Error('allOf: schemas with different types can\\'t be merged');\n            }\n\n            res.type = res.type || type;\n            res.readOnly = res.readOnly || readOnly;\n            res.writeOnly = res.writeOnly || writeOnly;\n            if (value != null) subSamples.push(value);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (res.type === 'object') {\n          res.value = _utils.mergeDeep.apply(void 0, [res.value || {}].concat(subSamples));\n          return res;\n        } else {\n          if (res.type === 'array') {\n            // TODO: implement arrays\n            if (!options.quiet) console.warn('OpenAPI Sampler: found allOf with \"array\" type. Result may be incorrect');\n          }\n\n          var lastSample = subSamples[subSamples.length - 1];\n          res.value = lastSample != null ? lastSample : res.value;\n          return res;\n        }\n      }\n    }, {\n      \"./traverse\": 12,\n      \"./utils\": 13\n    }],\n    4: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.inferType = inferType;\n      var schemaKeywordTypes = {\n        multipleOf: 'number',\n        maximum: 'number',\n        exclusiveMaximum: 'number',\n        minimum: 'number',\n        exclusiveMinimum: 'number',\n        maxLength: 'string',\n        minLength: 'string',\n        pattern: 'string',\n        items: 'array',\n        maxItems: 'array',\n        minItems: 'array',\n        uniqueItems: 'array',\n        additionalItems: 'array',\n        maxProperties: 'object',\n        minProperties: 'object',\n        required: 'object',\n        additionalProperties: 'object',\n        properties: 'object',\n        patternProperties: 'object',\n        dependencies: 'object'\n      };\n\n      function inferType(schema) {\n        if (schema.type !== undefined) {\n          return schema.type;\n        }\n\n        var keywords = Object.keys(schemaKeywordTypes);\n\n        for (var i = 0; i < keywords.length; i++) {\n          var keyword = keywords[i];\n          var type = schemaKeywordTypes[keyword];\n\n          if (schema[keyword] !== undefined) {\n            return type;\n          }\n        }\n\n        return null;\n      }\n    }, {}],\n    5: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sample = sample;\n      exports._registerSampler = _registerSampler;\n      Object.defineProperty(exports, \"inferType\", {\n        enumerable: true,\n        get: function get() {\n          return _infer.inferType;\n        }\n      });\n      exports._samplers = void 0;\n\n      var _traverse = require(\"./traverse\");\n\n      var _index = require(\"./samplers/index\");\n\n      var _infer = require(\"./infer\");\n\n      var _samplers = {};\n      exports._samplers = _samplers;\n      var defaults = {\n        skipReadOnly: false\n      };\n\n      function sample(schema, options, spec) {\n        var opts = Object.assign({}, defaults, options);\n        (0, _traverse.clearCache)();\n        return (0, _traverse.traverse)(schema, opts, spec).value;\n      }\n\n      ;\n\n      function _registerSampler(type, sampler) {\n        _samplers[type] = sampler;\n      }\n\n      ;\n\n      _registerSampler('array', _index.sampleArray);\n\n      _registerSampler('boolean', _index.sampleBoolean);\n\n      _registerSampler('integer', _index.sampleNumber);\n\n      _registerSampler('number', _index.sampleNumber);\n\n      _registerSampler('object', _index.sampleObject);\n\n      _registerSampler('string', _index.sampleString);\n    }, {\n      \"./infer\": 4,\n      \"./samplers/index\": 8,\n      \"./traverse\": 12\n    }],\n    6: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sampleArray = sampleArray;\n\n      var _traverse2 = require(\"../traverse\");\n\n      function sampleArray(schema) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var spec = arguments.length > 2 ? arguments[2] : undefined;\n        var arrayLength = schema.minItems || 1;\n\n        if (Array.isArray(schema.items)) {\n          arrayLength = Math.max(arrayLength, schema.items.length);\n        }\n\n        var itemSchemaGetter = function itemSchemaGetter(itemNumber) {\n          if (Array.isArray(schema.items)) {\n            return schema.items[itemNumber] || {};\n          }\n\n          return schema.items || {};\n        };\n\n        var res = [];\n        if (!schema.items) return res;\n\n        for (var i = 0; i < arrayLength; i++) {\n          var itemSchema = itemSchemaGetter(i);\n\n          var _traverse = (0, _traverse2.traverse)(itemSchema, options, spec),\n              sample = _traverse.value;\n\n          res.push(sample);\n        }\n\n        return res;\n      }\n    }, {\n      \"../traverse\": 12\n    }],\n    7: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sampleBoolean = sampleBoolean;\n\n      function sampleBoolean(schema) {\n        return true; // let be optimistic :)\n      }\n    }, {}],\n    8: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      Object.defineProperty(exports, \"sampleArray\", {\n        enumerable: true,\n        get: function get() {\n          return _array.sampleArray;\n        }\n      });\n      Object.defineProperty(exports, \"sampleBoolean\", {\n        enumerable: true,\n        get: function get() {\n          return _boolean.sampleBoolean;\n        }\n      });\n      Object.defineProperty(exports, \"sampleNumber\", {\n        enumerable: true,\n        get: function get() {\n          return _number.sampleNumber;\n        }\n      });\n      Object.defineProperty(exports, \"sampleObject\", {\n        enumerable: true,\n        get: function get() {\n          return _object.sampleObject;\n        }\n      });\n      Object.defineProperty(exports, \"sampleString\", {\n        enumerable: true,\n        get: function get() {\n          return _string.sampleString;\n        }\n      });\n\n      var _array = require(\"./array\");\n\n      var _boolean = require(\"./boolean\");\n\n      var _number = require(\"./number\");\n\n      var _object = require(\"./object\");\n\n      var _string = require(\"./string\");\n    }, {\n      \"./array\": 6,\n      \"./boolean\": 7,\n      \"./number\": 9,\n      \"./object\": 10,\n      \"./string\": 11\n    }],\n    9: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sampleNumber = sampleNumber;\n\n      function sampleNumber(schema) {\n        var res;\n\n        if (schema.maximum && schema.minimum) {\n          res = schema.exclusiveMinimum ? Math.floor(schema.minimum) + 1 : schema.minimum;\n\n          if (schema.exclusiveMaximum && res >= schema.maximum || !schema.exclusiveMaximum && res > schema.maximum) {\n            res = (schema.maximum + schema.minimum) / 2;\n          }\n\n          return res;\n        }\n\n        if (schema.minimum) {\n          if (schema.exclusiveMinimum) {\n            return Math.floor(schema.minimum) + 1;\n          } else {\n            return schema.minimum;\n          }\n        }\n\n        if (schema.maximum) {\n          if (schema.exclusiveMaximum) {\n            return schema.maximum > 0 ? 0 : Math.floor(schema.maximum) - 1;\n          } else {\n            return schema.maximum > 0 ? 0 : schema.maximum;\n          }\n        }\n\n        return 0;\n      }\n    }, {}],\n    10: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sampleObject = sampleObject;\n\n      var _traverse = require(\"../traverse\");\n\n      function _typeof(obj) {\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n          _typeof = function _typeof(obj) {\n            return typeof obj;\n          };\n        } else {\n          _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n          };\n        }\n\n        return _typeof(obj);\n      }\n\n      function sampleObject(schema) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var spec = arguments.length > 2 ? arguments[2] : undefined;\n        var res = {};\n\n        if (schema && _typeof(schema.properties) === 'object') {\n          var requiredKeys = Array.isArray(schema.required) ? schema.required : [];\n          var requiredKeyDict = requiredKeys.reduce(function (dict, key) {\n            dict[key] = true;\n            return dict;\n          }, {});\n          Object.keys(schema.properties).forEach(function (propertyName) {\n            // skip before traverse that could be costly\n            if (options.skipNonRequired && !requiredKeyDict.hasOwnProperty(propertyName)) {\n              return;\n            }\n\n            var sample = (0, _traverse.traverse)(schema.properties[propertyName], options, spec);\n\n            if (options.skipReadOnly && sample.readOnly) {\n              return;\n            }\n\n            if (options.skipWriteOnly && sample.writeOnly) {\n              return;\n            }\n\n            res[propertyName] = sample.value;\n          });\n        }\n\n        if (schema && _typeof(schema.additionalProperties) === 'object') {\n          res.property1 = (0, _traverse.traverse)(schema.additionalProperties, options, spec).value;\n          res.property2 = (0, _traverse.traverse)(schema.additionalProperties, options, spec).value;\n        }\n\n        return res;\n      }\n    }, {\n      \"../traverse\": 12\n    }],\n    11: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.sampleString = sampleString;\n\n      var _utils = require(\"../utils\");\n\n      var passwordSymbols = 'qwerty!@#$%^123456';\n\n      function emailSample() {\n        return 'user@example.com';\n      }\n\n      function passwordSample(min, max) {\n        var res = 'pa$$word';\n\n        if (min > res.length) {\n          res += '_';\n          res += (0, _utils.ensureMinLength)(passwordSymbols, min - res.length).substring(0, min - res.length);\n        }\n\n        return res;\n      }\n\n      function commonDateTimeSample(min, max, omitTime) {\n        var res = (0, _utils.toRFCDateTime)(new Date(), omitTime, false);\n\n        if (res.length < min) {\n          throw new Error(\"Using minLength = \".concat(min, \" is incorrect with format \\\"date-time\\\"\"));\n        }\n\n        if (max && res.length > max) {\n          throw new Error(\"Using maxLength = \".concat(max, \" is incorrect with format \\\"date-time\\\"\"));\n        }\n\n        return res;\n      }\n\n      function dateTimeSample(min, max) {\n        return commonDateTimeSample(min, max);\n      }\n\n      function dateSample(min, max) {\n        return commonDateTimeSample(min, max, true);\n      }\n\n      function defaultSample(min, max) {\n        var res = (0, _utils.ensureMinLength)('string', min);\n\n        if (max && res.length > max) {\n          res = res.substring(0, max);\n        }\n\n        return res;\n      }\n\n      function ipv4Sample() {\n        return '192.168.0.1';\n      }\n\n      function ipv6Sample() {\n        return '2001:0db8:85a3:0000:0000:8a2e:0370:7334';\n      }\n\n      function hostnameSample() {\n        return 'example.com';\n      }\n\n      function uriSample() {\n        return 'http://example.com';\n      }\n\n      var stringFormats = {\n        'email': emailSample,\n        'password': passwordSample,\n        'date-time': dateTimeSample,\n        'date': dateSample,\n        'ipv4': ipv4Sample,\n        'ipv6': ipv6Sample,\n        'hostname': hostnameSample,\n        'uri': uriSample,\n        'default': defaultSample\n      };\n\n      function sampleString(schema) {\n        var format = schema.format || 'default';\n        var sampler = stringFormats[format] || defaultSample;\n        return sampler(schema.minLength | 0, schema.maxLength);\n      }\n    }, {\n      \"../utils\": 13\n    }],\n    12: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clearCache = clearCache;\n      exports.traverse = traverse;\n\n      var _openapiSampler = require(\"./openapi-sampler\");\n\n      var _allOf = require(\"./allOf\");\n\n      var _infer = require(\"./infer\");\n\n      var _jsonPointer = _interopRequireDefault(require(\"json-pointer\"));\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _objectSpread(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i] != null ? arguments[i] : {};\n          var ownKeys = Object.keys(source);\n\n          if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n              return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n          }\n\n          ownKeys.forEach(function (key) {\n            _defineProperty(target, key, source[key]);\n          });\n        }\n\n        return target;\n      }\n\n      function _defineProperty(obj, key, value) {\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n\n        return obj;\n      }\n\n      var $refCache = {};\n\n      function clearCache() {\n        $refCache = {};\n      }\n\n      function traverse(schema, options, spec) {\n        if (schema.$ref) {\n          if (!spec) {\n            throw new Error('Your schema contains $ref. You must provide specification in the third parameter.');\n          }\n\n          var ref = decodeURIComponent(schema.$ref);\n\n          if (ref.startsWith('#')) {\n            ref = ref.substring(1);\n          }\n\n          var referenced = _jsonPointer.default.get(spec, ref);\n\n          var result;\n\n          if ($refCache[ref] !== true) {\n            $refCache[ref] = true;\n            result = traverse(referenced, options, spec);\n            $refCache[ref] = false;\n          } else {\n            var referencedType = (0, _infer.inferType)(referenced);\n            result = {\n              value: referencedType === 'object' ? {} : referencedType === 'array' ? [] : undefined\n            };\n          }\n\n          return result;\n        }\n\n        if (schema.example !== undefined) {\n          return {\n            value: schema.example,\n            readOnly: schema.readOnly,\n            writeOnly: schema.writeOnly,\n            type: schema.type\n          };\n        }\n\n        if (schema.allOf !== undefined) {\n          return (0, _allOf.allOfSample)(_objectSpread({}, schema, {\n            allOf: undefined\n          }), schema.allOf, options, spec);\n        }\n\n        if (schema.oneOf && schema.oneOf.length) {\n          if (schema.anyOf) {\n            if (!options.quiet) console.warn('oneOf and anyOf are not supported on the same level. Skipping anyOf');\n          }\n\n          return traverse(schema.oneOf[0], options, spec);\n        }\n\n        if (schema.anyOf && schema.anyOf.length) {\n          return traverse(schema.anyOf[0], options, spec);\n        }\n\n        var example = null;\n        var type = null;\n\n        if (schema.default !== undefined) {\n          example = schema.default;\n        } else if (schema.const !== undefined) {\n          example = schema.const;\n        } else if (schema.enum !== undefined && schema.enum.length) {\n          example = schema.enum[0];\n        } else if (schema.examples !== undefined && schema.examples.length) {\n          example = schema.examples[0];\n        } else {\n          type = schema.type;\n\n          if (!type) {\n            type = (0, _infer.inferType)(schema);\n          }\n\n          var sampler = _openapiSampler._samplers[type];\n\n          if (sampler) {\n            example = sampler(schema, options, spec);\n          }\n        }\n\n        return {\n          value: example,\n          readOnly: schema.readOnly,\n          writeOnly: schema.writeOnly,\n          type: type\n        };\n      }\n    }, {\n      \"./allOf\": 3,\n      \"./infer\": 4,\n      \"./openapi-sampler\": 5,\n      \"json-pointer\": 2\n    }],\n    13: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.toRFCDateTime = toRFCDateTime;\n      exports.ensureMinLength = ensureMinLength;\n      exports.mergeDeep = mergeDeep;\n\n      function _typeof(obj) {\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n          _typeof = function _typeof(obj) {\n            return typeof obj;\n          };\n        } else {\n          _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n          };\n        }\n\n        return _typeof(obj);\n      }\n\n      function pad(number) {\n        if (number < 10) {\n          return '0' + number;\n        }\n\n        return number;\n      }\n\n      function toRFCDateTime(date, omitTime, milliseconds) {\n        var res = date.getUTCFullYear() + '-' + pad(date.getUTCMonth() + 1) + '-' + pad(date.getUTCDate());\n\n        if (!omitTime) {\n          res += 'T' + pad(date.getUTCHours()) + ':' + pad(date.getUTCMinutes()) + ':' + pad(date.getUTCSeconds()) + (milliseconds ? '.' + (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) : '') + 'Z';\n        }\n\n        return res;\n      }\n\n      ;\n\n      function ensureMinLength(sample, min) {\n        if (min > sample.length) {\n          return sample.repeat(Math.trunc(min / sample.length) + 1).substring(0, min);\n        }\n\n        return sample;\n      }\n\n      function mergeDeep() {\n        var isObject = function isObject(obj) {\n          return obj && _typeof(obj) === 'object';\n        };\n\n        for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n          objects[_key] = arguments[_key];\n        }\n\n        return objects.reduce(function (prev, obj) {\n          Object.keys(obj).forEach(function (key) {\n            var pVal = prev[key];\n            var oVal = obj[key];\n\n            if (isObject(pVal) && isObject(oVal)) {\n              prev[key] = mergeDeep(pVal, oVal);\n            } else {\n              prev[key] = oVal;\n            }\n          });\n          return prev;\n        }, Array.isArray(objects[objects.length - 1]) ? [] : {});\n      }\n    }, {}]\n  }, {}, [5])(5);\n});","map":null,"metadata":{},"sourceType":"script"}