{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== 'undefined') {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.decko = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  exports.__esModule = true;\n  var EMPTY = {};\n  var HOP = Object.prototype.hasOwnProperty;\n  var fns = {\n    memoize: function memoize(fn) {\n      var opt = arguments.length <= 1 || arguments[1] === undefined ? EMPTY : arguments[1];\n      var cache = opt.cache || {};\n      return function () {\n        for (var _len = arguments.length, a = Array(_len), _key = 0; _key < _len; _key++) {\n          a[_key] = arguments[_key];\n        }\n\n        var k = String(a[0]);\n        if (opt.caseSensitive === false) k = k.toLowerCase();\n        return HOP.call(cache, k) ? cache[k] : cache[k] = fn.apply(this, a);\n      };\n    },\n    debounce: function debounce(fn, opts) {\n      if (typeof opts === 'function') {\n        var p = fn;\n        fn = opts;\n        opts = p;\n      }\n\n      var delay = opts && opts.delay || opts || 0,\n          args = undefined,\n          context = undefined,\n          timer = undefined;\n      return function () {\n        for (var _len2 = arguments.length, a = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          a[_key2] = arguments[_key2];\n        }\n\n        args = a;\n        context = this;\n        if (!timer) timer = setTimeout(function () {\n          fn.apply(context, args);\n          args = context = timer = null;\n        }, delay);\n      };\n    },\n    bind: function bind(target, key, _ref) {\n      var fn = _ref.value;\n      return {\n        configurable: true,\n        get: function get() {\n          var value = fn.bind(this);\n          Object.defineProperty(this, key, {\n            value: value,\n            configurable: true,\n            writable: true\n          });\n          return value;\n        }\n      };\n    }\n  };\n  var memoize = multiMethod(fns.memoize),\n      debounce = multiMethod(fns.debounce),\n      bind = multiMethod(function (f, c) {\n    return f.bind(c);\n  }, function () {\n    return fns.bind;\n  });\n  exports.memoize = memoize;\n  exports.debounce = debounce;\n  exports.bind = bind;\n  exports['default'] = {\n    memoize: memoize,\n    debounce: debounce,\n    bind: bind\n  };\n\n  function multiMethod(inner, deco) {\n    deco = deco || inner.decorate || decorator(inner);\n    var d = deco();\n    return function () {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var l = args.length;\n      return (l < 2 ? deco : l > 2 ? d : inner).apply(undefined, args);\n    };\n  }\n\n  function decorator(fn) {\n    return function (opt) {\n      return typeof opt === 'function' ? fn(opt) : function (target, key, desc) {\n        desc.value = fn(desc.value, opt, target, key, desc);\n      };\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"script"}