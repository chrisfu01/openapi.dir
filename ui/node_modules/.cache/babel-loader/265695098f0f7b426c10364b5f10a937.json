{"ast":null,"code":"var fs = require('fs');\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar crypto = require('crypto');\n\nvar mkdirp = require('mkdirp');\n\nfunction getFilename(req, file, cb) {\n  crypto.pseudoRandomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'));\n  });\n}\n\nfunction getDestination(req, file, cb) {\n  cb(null, os.tmpdir());\n}\n\nfunction DiskStorage(opts) {\n  this.getFilename = opts.filename || getFilename;\n\n  if (typeof opts.destination === 'string') {\n    mkdirp.sync(opts.destination);\n\n    this.getDestination = function ($0, $1, cb) {\n      cb(null, opts.destination);\n    };\n  } else {\n    this.getDestination = opts.destination || getDestination;\n  }\n}\n\nDiskStorage.prototype._handleFile = function _handleFile(req, file, cb) {\n  var that = this;\n  that.getDestination(req, file, function (err, destination) {\n    if (err) return cb(err);\n    that.getFilename(req, file, function (err, filename) {\n      if (err) return cb(err);\n      var finalPath = path.join(destination, filename);\n      var outStream = fs.createWriteStream(finalPath);\n      file.stream.pipe(outStream);\n      outStream.on('error', cb);\n      outStream.on('finish', function () {\n        cb(null, {\n          destination: destination,\n          filename: filename,\n          path: finalPath,\n          size: outStream.bytesWritten\n        });\n      });\n    });\n  });\n};\n\nDiskStorage.prototype._removeFile = function _removeFile(req, file, cb) {\n  var path = file.path;\n  delete file.destination;\n  delete file.filename;\n  delete file.path;\n  fs.unlink(path, cb);\n};\n\nmodule.exports = function (opts) {\n  return new DiskStorage(opts);\n};","map":null,"metadata":{},"sourceType":"script"}