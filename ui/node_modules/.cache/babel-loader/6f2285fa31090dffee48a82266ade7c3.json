{"ast":null,"code":"\"use strict\";\n\nvar isWindows = /^win/.test(process.platform),\n    forwardSlashPattern = /\\//g,\n    protocolPattern = /^(\\w{2,}):\\/\\//i,\n    url = module.exports; // RegExp patterns to URL-encode special characters in local filesystem paths\n\nvar urlEncodePatterns = [/\\?/g, \"%3F\", /\\#/g, \"%23\"]; // RegExp patterns to URL-decode special characters for local filesystem paths\n\nvar urlDecodePatterns = [/\\%23/g, \"#\", /\\%24/g, \"$\", /\\%26/g, \"&\", /\\%2C/g, \",\", /\\%40/g, \"@\"];\nexports.parse = require(\"url\").parse;\nexports.resolve = require(\"url\").resolve;\n/**\n * Returns the current working directory (in Node) or the current page URL (in browsers).\n *\n * @returns {string}\n */\n\nexports.cwd = function cwd() {\n  return process.browser ? location.href : process.cwd() + \"/\";\n};\n/**\n * Returns the protocol of the given URL, or `undefined` if it has no protocol.\n *\n * @param   {string} path\n * @returns {?string}\n */\n\n\nexports.getProtocol = function getProtocol(path) {\n  var match = protocolPattern.exec(path);\n\n  if (match) {\n    return match[1].toLowerCase();\n  }\n};\n/**\n * Returns the lowercased file extension of the given URL,\n * or an empty string if it has no extension.\n *\n * @param   {string} path\n * @returns {string}\n */\n\n\nexports.getExtension = function getExtension(path) {\n  var lastDot = path.lastIndexOf(\".\");\n\n  if (lastDot >= 0) {\n    return path.substr(lastDot).toLowerCase();\n  }\n\n  return \"\";\n};\n/**\n * Returns the hash (URL fragment), of the given path.\n * If there is no hash, then the root hash (\"#\") is returned.\n *\n * @param   {string} path\n * @returns {string}\n */\n\n\nexports.getHash = function getHash(path) {\n  var hashIndex = path.indexOf(\"#\");\n\n  if (hashIndex >= 0) {\n    return path.substr(hashIndex);\n  }\n\n  return \"#\";\n};\n/**\n * Removes the hash (URL fragment), if any, from the given path.\n *\n * @param   {string} path\n * @returns {string}\n */\n\n\nexports.stripHash = function stripHash(path) {\n  var hashIndex = path.indexOf(\"#\");\n\n  if (hashIndex >= 0) {\n    path = path.substr(0, hashIndex);\n  }\n\n  return path;\n};\n/**\n * Determines whether the given path is an HTTP(S) URL.\n *\n * @param   {string} path\n * @returns {boolean}\n */\n\n\nexports.isHttp = function isHttp(path) {\n  var protocol = url.getProtocol(path);\n\n  if (protocol === \"http\" || protocol === \"https\") {\n    return true;\n  } else if (protocol === undefined) {\n    // There is no protocol.  If we're running in a browser, then assume it's HTTP.\n    return process.browser;\n  } else {\n    // It's some other protocol, such as \"ftp://\", \"mongodb://\", etc.\n    return false;\n  }\n};\n/**\n * Determines whether the given path is a filesystem path.\n * This includes \"file://\" URLs.\n *\n * @param   {string} path\n * @returns {boolean}\n */\n\n\nexports.isFileSystemPath = function isFileSystemPath(path) {\n  if (process.browser) {\n    // We're running in a browser, so assume that all paths are URLs.\n    // This way, even relative paths will be treated as URLs rather than as filesystem paths\n    return false;\n  }\n\n  var protocol = url.getProtocol(path);\n  return protocol === undefined || protocol === \"file\";\n};\n/**\n * Converts a filesystem path to a properly-encoded URL.\n *\n * This is intended to handle situations where JSON Schema $Ref Parser is called\n * with a filesystem path that contains characters which are not allowed in URLs.\n *\n * @example\n * The following filesystem paths would be converted to the following URLs:\n *\n *    <\"!@#$%^&*+=?'>.json              ==>   %3C%22!@%23$%25%5E&*+=%3F\\'%3E.json\n *    C:\\\\My Documents\\\\File (1).json   ==>   C:/My%20Documents/File%20(1).json\n *    file://Project #42/file.json      ==>   file://Project%20%2342/file.json\n *\n * @param {string} path\n * @returns {string}\n */\n\n\nexports.fromFileSystemPath = function fromFileSystemPath(path) {\n  // Step 1: On Windows, replace backslashes with forward slashes,\n  // rather than encoding them as \"%5C\"\n  if (isWindows) {\n    path = path.replace(/\\\\/g, \"/\");\n  } // Step 2: `encodeURI` will take care of MOST characters\n\n\n  path = encodeURI(path); // Step 3: Manually encode characters that are not encoded by `encodeURI`.\n  // This includes characters such as \"#\" and \"?\", which have special meaning in URLs,\n  // but are just normal characters in a filesystem path.\n\n  for (var i = 0; i < urlEncodePatterns.length; i += 2) {\n    path = path.replace(urlEncodePatterns[i], urlEncodePatterns[i + 1]);\n  }\n\n  return path;\n};\n/**\n * Converts a URL to a local filesystem path.\n *\n * @param {string}  path\n * @param {boolean} [keepFileProtocol] - If true, then \"file://\" will NOT be stripped\n * @returns {string}\n */\n\n\nexports.toFileSystemPath = function toFileSystemPath(path, keepFileProtocol) {\n  // Step 1: `decodeURI` will decode characters such as Cyrillic characters, spaces, etc.\n  path = decodeURI(path); // Step 2: Manually decode characters that are not decoded by `decodeURI`.\n  // This includes characters such as \"#\" and \"?\", which have special meaning in URLs,\n  // but are just normal characters in a filesystem path.\n\n  for (var i = 0; i < urlDecodePatterns.length; i += 2) {\n    path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);\n  } // Step 3: If it's a \"file://\" URL, then format it consistently\n  // or convert it to a local filesystem path\n\n\n  var isFileUrl = path.substr(0, 7).toLowerCase() === \"file://\";\n\n  if (isFileUrl) {\n    // Strip-off the protocol, and the initial \"/\", if there is one\n    path = path[7] === \"/\" ? path.substr(8) : path.substr(7); // insert a colon (\":\") after the drive letter on Windows\n\n    if (isWindows && path[1] === \"/\") {\n      path = path[0] + \":\" + path.substr(1);\n    }\n\n    if (keepFileProtocol) {\n      // Return the consistently-formatted \"file://\" URL\n      path = \"file:///\" + path;\n    } else {\n      // Convert the \"file://\" URL to a local filesystem path.\n      // On Windows, it will start with something like \"C:/\".\n      // On Posix, it will start with \"/\"\n      isFileUrl = false;\n      path = isWindows ? path : \"/\" + path;\n    }\n  } // Step 4: Normalize Windows paths (unless it's a \"file://\" URL)\n\n\n  if (isWindows && !isFileUrl) {\n    // Replace forward slashes with backslashes\n    path = path.replace(forwardSlashPattern, \"\\\\\"); // Capitalize the drive letter\n\n    if (path.substr(1, 2) === \":\\\\\") {\n      path = path[0].toUpperCase() + path.substr(1);\n    }\n  }\n\n  return path;\n};","map":null,"metadata":{},"sourceType":"script"}