{"ast":null,"code":"/*!***************************************************\n* mark.js v8.11.1\n* https://markjs.io/\n* Copyright (c) 2014–2018, Julian Kühnel\n* Released under the MIT license https://git.io/vwTVl\n*****************************************************/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Mark = factory();\n})(this, function () {\n  'use strict';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var DOMIterator = function () {\n    function DOMIterator(ctx) {\n      var iframes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var iframesTimeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5000;\n      classCallCheck(this, DOMIterator);\n      this.ctx = ctx;\n      this.iframes = iframes;\n      this.exclude = exclude;\n      this.iframesTimeout = iframesTimeout;\n    }\n\n    createClass(DOMIterator, [{\n      key: 'getContexts',\n      value: function getContexts() {\n        var ctx = void 0,\n            filteredCtx = [];\n\n        if (typeof this.ctx === 'undefined' || !this.ctx) {\n          ctx = [];\n        } else if (NodeList.prototype.isPrototypeOf(this.ctx)) {\n          ctx = Array.prototype.slice.call(this.ctx);\n        } else if (Array.isArray(this.ctx)) {\n          ctx = this.ctx;\n        } else if (typeof this.ctx === 'string') {\n          ctx = Array.prototype.slice.call(document.querySelectorAll(this.ctx));\n        } else {\n          ctx = [this.ctx];\n        }\n\n        ctx.forEach(function (ctx) {\n          var isDescendant = filteredCtx.filter(function (contexts) {\n            return contexts.contains(ctx);\n          }).length > 0;\n\n          if (filteredCtx.indexOf(ctx) === -1 && !isDescendant) {\n            filteredCtx.push(ctx);\n          }\n        });\n        return filteredCtx;\n      }\n    }, {\n      key: 'getIframeContents',\n      value: function getIframeContents(ifr, successFn) {\n        var errorFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n        var doc = void 0;\n\n        try {\n          var ifrWin = ifr.contentWindow;\n          doc = ifrWin.document;\n\n          if (!ifrWin || !doc) {\n            throw new Error('iframe inaccessible');\n          }\n        } catch (e) {\n          errorFn();\n        }\n\n        if (doc) {\n          successFn(doc);\n        }\n      }\n    }, {\n      key: 'isIframeBlank',\n      value: function isIframeBlank(ifr) {\n        var bl = 'about:blank',\n            src = ifr.getAttribute('src').trim(),\n            href = ifr.contentWindow.location.href;\n        return href === bl && src !== bl && src;\n      }\n    }, {\n      key: 'observeIframeLoad',\n      value: function observeIframeLoad(ifr, successFn, errorFn) {\n        var _this = this;\n\n        var called = false,\n            tout = null;\n\n        var listener = function listener() {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          clearTimeout(tout);\n\n          try {\n            if (!_this.isIframeBlank(ifr)) {\n              ifr.removeEventListener('load', listener);\n\n              _this.getIframeContents(ifr, successFn, errorFn);\n            }\n          } catch (e) {\n            errorFn();\n          }\n        };\n\n        ifr.addEventListener('load', listener);\n        tout = setTimeout(listener, this.iframesTimeout);\n      }\n    }, {\n      key: 'onIframeReady',\n      value: function onIframeReady(ifr, successFn, errorFn) {\n        try {\n          if (ifr.contentWindow.document.readyState === 'complete') {\n            if (this.isIframeBlank(ifr)) {\n              this.observeIframeLoad(ifr, successFn, errorFn);\n            } else {\n              this.getIframeContents(ifr, successFn, errorFn);\n            }\n          } else {\n            this.observeIframeLoad(ifr, successFn, errorFn);\n          }\n        } catch (e) {\n          errorFn();\n        }\n      }\n    }, {\n      key: 'waitForIframes',\n      value: function waitForIframes(ctx, done) {\n        var _this2 = this;\n\n        var eachCalled = 0;\n        this.forEachIframe(ctx, function () {\n          return true;\n        }, function (ifr) {\n          eachCalled++;\n\n          _this2.waitForIframes(ifr.querySelector('html'), function () {\n            if (! --eachCalled) {\n              done();\n            }\n          });\n        }, function (handled) {\n          if (!handled) {\n            done();\n          }\n        });\n      }\n    }, {\n      key: 'forEachIframe',\n      value: function forEachIframe(ctx, filter, each) {\n        var _this3 = this;\n\n        var end = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n        var ifr = ctx.querySelectorAll('iframe'),\n            open = ifr.length,\n            handled = 0;\n        ifr = Array.prototype.slice.call(ifr);\n\n        var checkEnd = function checkEnd() {\n          if (--open <= 0) {\n            end(handled);\n          }\n        };\n\n        if (!open) {\n          checkEnd();\n        }\n\n        ifr.forEach(function (ifr) {\n          if (DOMIterator.matches(ifr, _this3.exclude)) {\n            checkEnd();\n          } else {\n            _this3.onIframeReady(ifr, function (con) {\n              if (filter(ifr)) {\n                handled++;\n                each(con);\n              }\n\n              checkEnd();\n            }, checkEnd);\n          }\n        });\n      }\n    }, {\n      key: 'createIterator',\n      value: function createIterator(ctx, whatToShow, filter) {\n        return document.createNodeIterator(ctx, whatToShow, filter, false);\n      }\n    }, {\n      key: 'createInstanceOnIframe',\n      value: function createInstanceOnIframe(contents) {\n        return new DOMIterator(contents.querySelector('html'), this.iframes);\n      }\n    }, {\n      key: 'compareNodeIframe',\n      value: function compareNodeIframe(node, prevNode, ifr) {\n        var compCurr = node.compareDocumentPosition(ifr),\n            prev = Node.DOCUMENT_POSITION_PRECEDING;\n\n        if (compCurr & prev) {\n          if (prevNode !== null) {\n            var compPrev = prevNode.compareDocumentPosition(ifr),\n                after = Node.DOCUMENT_POSITION_FOLLOWING;\n\n            if (compPrev & after) {\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: 'getIteratorNode',\n      value: function getIteratorNode(itr) {\n        var prevNode = itr.previousNode();\n        var node = void 0;\n\n        if (prevNode === null) {\n          node = itr.nextNode();\n        } else {\n          node = itr.nextNode() && itr.nextNode();\n        }\n\n        return {\n          prevNode: prevNode,\n          node: node\n        };\n      }\n    }, {\n      key: 'checkIframeFilter',\n      value: function checkIframeFilter(node, prevNode, currIfr, ifr) {\n        var key = false,\n            handled = false;\n        ifr.forEach(function (ifrDict, i) {\n          if (ifrDict.val === currIfr) {\n            key = i;\n            handled = ifrDict.handled;\n          }\n        });\n\n        if (this.compareNodeIframe(node, prevNode, currIfr)) {\n          if (key === false && !handled) {\n            ifr.push({\n              val: currIfr,\n              handled: true\n            });\n          } else if (key !== false && !handled) {\n            ifr[key].handled = true;\n          }\n\n          return true;\n        }\n\n        if (key === false) {\n          ifr.push({\n            val: currIfr,\n            handled: false\n          });\n        }\n\n        return false;\n      }\n    }, {\n      key: 'handleOpenIframes',\n      value: function handleOpenIframes(ifr, whatToShow, eCb, fCb) {\n        var _this4 = this;\n\n        ifr.forEach(function (ifrDict) {\n          if (!ifrDict.handled) {\n            _this4.getIframeContents(ifrDict.val, function (con) {\n              _this4.createInstanceOnIframe(con).forEachNode(whatToShow, eCb, fCb);\n            });\n          }\n        });\n      }\n    }, {\n      key: 'iterateThroughNodes',\n      value: function iterateThroughNodes(whatToShow, ctx, eachCb, filterCb, doneCb) {\n        var _this5 = this;\n\n        var itr = this.createIterator(ctx, whatToShow, filterCb);\n\n        var ifr = [],\n            elements = [],\n            node = void 0,\n            prevNode = void 0,\n            retrieveNodes = function retrieveNodes() {\n          var _getIteratorNode = _this5.getIteratorNode(itr);\n\n          prevNode = _getIteratorNode.prevNode;\n          node = _getIteratorNode.node;\n          return node;\n        };\n\n        while (retrieveNodes()) {\n          if (this.iframes) {\n            this.forEachIframe(ctx, function (currIfr) {\n              return _this5.checkIframeFilter(node, prevNode, currIfr, ifr);\n            }, function (con) {\n              _this5.createInstanceOnIframe(con).forEachNode(whatToShow, function (ifrNode) {\n                return elements.push(ifrNode);\n              }, filterCb);\n            });\n          }\n\n          elements.push(node);\n        }\n\n        elements.forEach(function (node) {\n          eachCb(node);\n        });\n\n        if (this.iframes) {\n          this.handleOpenIframes(ifr, whatToShow, eachCb, filterCb);\n        }\n\n        doneCb();\n      }\n    }, {\n      key: 'forEachNode',\n      value: function forEachNode(whatToShow, each, filter) {\n        var _this6 = this;\n\n        var done = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n        var contexts = this.getContexts();\n        var open = contexts.length;\n\n        if (!open) {\n          done();\n        }\n\n        contexts.forEach(function (ctx) {\n          var ready = function ready() {\n            _this6.iterateThroughNodes(whatToShow, ctx, each, filter, function () {\n              if (--open <= 0) {\n                done();\n              }\n            });\n          };\n\n          if (_this6.iframes) {\n            _this6.waitForIframes(ctx, ready);\n          } else {\n            ready();\n          }\n        });\n      }\n    }], [{\n      key: 'matches',\n      value: function matches(element, selector) {\n        var selectors = typeof selector === 'string' ? [selector] : selector,\n            fn = element.matches || element.matchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector;\n\n        if (fn) {\n          var match = false;\n          selectors.every(function (sel) {\n            if (fn.call(element, sel)) {\n              match = true;\n              return false;\n            }\n\n            return true;\n          });\n          return match;\n        } else {\n          return false;\n        }\n      }\n    }]);\n    return DOMIterator;\n  }();\n\n  var Mark$1 = function () {\n    function Mark(ctx) {\n      classCallCheck(this, Mark);\n      this.ctx = ctx;\n      this.ie = false;\n      var ua = window.navigator.userAgent;\n\n      if (ua.indexOf('MSIE') > -1 || ua.indexOf('Trident') > -1) {\n        this.ie = true;\n      }\n    }\n\n    createClass(Mark, [{\n      key: 'log',\n      value: function log(msg) {\n        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'debug';\n        var log = this.opt.log;\n\n        if (!this.opt.debug) {\n          return;\n        }\n\n        if ((typeof log === 'undefined' ? 'undefined' : _typeof(log)) === 'object' && typeof log[level] === 'function') {\n          log[level]('mark.js: ' + msg);\n        }\n      }\n    }, {\n      key: 'escapeStr',\n      value: function escapeStr(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n      }\n    }, {\n      key: 'createRegExp',\n      value: function createRegExp(str) {\n        if (this.opt.wildcards !== 'disabled') {\n          str = this.setupWildcardsRegExp(str);\n        }\n\n        str = this.escapeStr(str);\n\n        if (Object.keys(this.opt.synonyms).length) {\n          str = this.createSynonymsRegExp(str);\n        }\n\n        if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {\n          str = this.setupIgnoreJoinersRegExp(str);\n        }\n\n        if (this.opt.diacritics) {\n          str = this.createDiacriticsRegExp(str);\n        }\n\n        str = this.createMergedBlanksRegExp(str);\n\n        if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {\n          str = this.createJoinersRegExp(str);\n        }\n\n        if (this.opt.wildcards !== 'disabled') {\n          str = this.createWildcardsRegExp(str);\n        }\n\n        str = this.createAccuracyRegExp(str);\n        return str;\n      }\n    }, {\n      key: 'createSynonymsRegExp',\n      value: function createSynonymsRegExp(str) {\n        var syn = this.opt.synonyms,\n            sens = this.opt.caseSensitive ? '' : 'i',\n            joinerPlaceholder = this.opt.ignoreJoiners || this.opt.ignorePunctuation.length ? '\\0' : '';\n\n        for (var index in syn) {\n          if (syn.hasOwnProperty(index)) {\n            var value = syn[index],\n                k1 = this.opt.wildcards !== 'disabled' ? this.setupWildcardsRegExp(index) : this.escapeStr(index),\n                k2 = this.opt.wildcards !== 'disabled' ? this.setupWildcardsRegExp(value) : this.escapeStr(value);\n\n            if (k1 !== '' && k2 !== '') {\n              str = str.replace(new RegExp('(' + this.escapeStr(k1) + '|' + this.escapeStr(k2) + ')', 'gm' + sens), joinerPlaceholder + ('(' + this.processSynomyms(k1) + '|') + (this.processSynomyms(k2) + ')') + joinerPlaceholder);\n            }\n          }\n        }\n\n        return str;\n      }\n    }, {\n      key: 'processSynomyms',\n      value: function processSynomyms(str) {\n        if (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) {\n          str = this.setupIgnoreJoinersRegExp(str);\n        }\n\n        return str;\n      }\n    }, {\n      key: 'setupWildcardsRegExp',\n      value: function setupWildcardsRegExp(str) {\n        str = str.replace(/(?:\\\\)*\\?/g, function (val) {\n          return val.charAt(0) === '\\\\' ? '?' : '\\x01';\n        });\n        return str.replace(/(?:\\\\)*\\*/g, function (val) {\n          return val.charAt(0) === '\\\\' ? '*' : '\\x02';\n        });\n      }\n    }, {\n      key: 'createWildcardsRegExp',\n      value: function createWildcardsRegExp(str) {\n        var spaces = this.opt.wildcards === 'withSpaces';\n        return str.replace(/\\u0001/g, spaces ? '[\\\\S\\\\s]?' : '\\\\S?').replace(/\\u0002/g, spaces ? '[\\\\S\\\\s]*?' : '\\\\S*');\n      }\n    }, {\n      key: 'setupIgnoreJoinersRegExp',\n      value: function setupIgnoreJoinersRegExp(str) {\n        return str.replace(/[^(|)\\\\]/g, function (val, indx, original) {\n          var nextChar = original.charAt(indx + 1);\n\n          if (/[(|)\\\\]/.test(nextChar) || nextChar === '') {\n            return val;\n          } else {\n            return val + '\\0';\n          }\n        });\n      }\n    }, {\n      key: 'createJoinersRegExp',\n      value: function createJoinersRegExp(str) {\n        var joiner = [];\n        var ignorePunctuation = this.opt.ignorePunctuation;\n\n        if (Array.isArray(ignorePunctuation) && ignorePunctuation.length) {\n          joiner.push(this.escapeStr(ignorePunctuation.join('')));\n        }\n\n        if (this.opt.ignoreJoiners) {\n          joiner.push(\"\\\\u00ad\\\\u200b\\\\u200c\\\\u200d\");\n        }\n\n        return joiner.length ? str.split(/\\u0000+/).join('[' + joiner.join('') + ']*') : str;\n      }\n    }, {\n      key: 'createDiacriticsRegExp',\n      value: function createDiacriticsRegExp(str) {\n        var sens = this.opt.caseSensitive ? '' : 'i',\n            dct = this.opt.caseSensitive ? ['aàáảãạăằắẳẵặâầấẩẫậäåāą', 'AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ', 'cçćč', 'CÇĆČ', 'dđď', 'DĐĎ', 'eèéẻẽẹêềếểễệëěēę', 'EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ', 'iìíỉĩịîïī', 'IÌÍỈĨỊÎÏĪ', 'lł', 'LŁ', 'nñňń', 'NÑŇŃ', 'oòóỏõọôồốổỗộơởỡớờợöøō', 'OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ', 'rř', 'RŘ', 'sšśșş', 'SŠŚȘŞ', 'tťțţ', 'TŤȚŢ', 'uùúủũụưừứửữựûüůū', 'UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ', 'yýỳỷỹỵÿ', 'YÝỲỶỸỴŸ', 'zžżź', 'ZŽŻŹ'] : ['aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ', 'cçćčCÇĆČ', 'dđďDĐĎ', 'eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ', 'iìíỉĩịîïīIÌÍỈĨỊÎÏĪ', 'lłLŁ', 'nñňńNÑŇŃ', 'oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ', 'rřRŘ', 'sšśșşSŠŚȘŞ', 'tťțţTŤȚŢ', 'uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ', 'yýỳỷỹỵÿYÝỲỶỸỴŸ', 'zžżźZŽŻŹ'];\n        var handled = [];\n        str.split('').forEach(function (ch) {\n          dct.every(function (dct) {\n            if (dct.indexOf(ch) !== -1) {\n              if (handled.indexOf(dct) > -1) {\n                return false;\n              }\n\n              str = str.replace(new RegExp('[' + dct + ']', 'gm' + sens), '[' + dct + ']');\n              handled.push(dct);\n            }\n\n            return true;\n          });\n        });\n        return str;\n      }\n    }, {\n      key: 'createMergedBlanksRegExp',\n      value: function createMergedBlanksRegExp(str) {\n        return str.replace(/[\\s]+/gmi, '[\\\\s]+');\n      }\n    }, {\n      key: 'createAccuracyRegExp',\n      value: function createAccuracyRegExp(str) {\n        var _this = this;\n\n        var chars = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~¡¿';\n        var acc = this.opt.accuracy,\n            val = typeof acc === 'string' ? acc : acc.value,\n            ls = typeof acc === 'string' ? [] : acc.limiters,\n            lsJoin = '';\n        ls.forEach(function (limiter) {\n          lsJoin += '|' + _this.escapeStr(limiter);\n        });\n\n        switch (val) {\n          case 'partially':\n          default:\n            return '()(' + str + ')';\n\n          case 'complementary':\n            lsJoin = '\\\\s' + (lsJoin ? lsJoin : this.escapeStr(chars));\n            return '()([^' + lsJoin + ']*' + str + '[^' + lsJoin + ']*)';\n\n          case 'exactly':\n            return '(^|\\\\s' + lsJoin + ')(' + str + ')(?=$|\\\\s' + lsJoin + ')';\n        }\n      }\n    }, {\n      key: 'getSeparatedKeywords',\n      value: function getSeparatedKeywords(sv) {\n        var _this2 = this;\n\n        var stack = [];\n        sv.forEach(function (kw) {\n          if (!_this2.opt.separateWordSearch) {\n            if (kw.trim() && stack.indexOf(kw) === -1) {\n              stack.push(kw);\n            }\n          } else {\n            kw.split(' ').forEach(function (kwSplitted) {\n              if (kwSplitted.trim() && stack.indexOf(kwSplitted) === -1) {\n                stack.push(kwSplitted);\n              }\n            });\n          }\n        });\n        return {\n          'keywords': stack.sort(function (a, b) {\n            return b.length - a.length;\n          }),\n          'length': stack.length\n        };\n      }\n    }, {\n      key: 'isNumeric',\n      value: function isNumeric(value) {\n        return Number(parseFloat(value)) == value;\n      }\n    }, {\n      key: 'checkRanges',\n      value: function checkRanges(array) {\n        var _this3 = this;\n\n        if (!Array.isArray(array) || Object.prototype.toString.call(array[0]) !== '[object Object]') {\n          this.log('markRanges() will only accept an array of objects');\n          this.opt.noMatch(array);\n          return [];\n        }\n\n        var stack = [];\n        var last = 0;\n        array.sort(function (a, b) {\n          return a.start - b.start;\n        }).forEach(function (item) {\n          var _callNoMatchOnInvalid = _this3.callNoMatchOnInvalidRanges(item, last),\n              start = _callNoMatchOnInvalid.start,\n              end = _callNoMatchOnInvalid.end,\n              valid = _callNoMatchOnInvalid.valid;\n\n          if (valid) {\n            item.start = start;\n            item.length = end - start;\n            stack.push(item);\n            last = end;\n          }\n        });\n        return stack;\n      }\n    }, {\n      key: 'callNoMatchOnInvalidRanges',\n      value: function callNoMatchOnInvalidRanges(range, last) {\n        var start = void 0,\n            end = void 0,\n            valid = false;\n\n        if (range && typeof range.start !== 'undefined') {\n          start = parseInt(range.start, 10);\n          end = start + parseInt(range.length, 10);\n\n          if (this.isNumeric(range.start) && this.isNumeric(range.length) && end - last > 0 && end - start > 0) {\n            valid = true;\n          } else {\n            this.log('Ignoring invalid or overlapping range: ' + ('' + JSON.stringify(range)));\n            this.opt.noMatch(range);\n          }\n        } else {\n          this.log('Ignoring invalid range: ' + JSON.stringify(range));\n          this.opt.noMatch(range);\n        }\n\n        return {\n          start: start,\n          end: end,\n          valid: valid\n        };\n      }\n    }, {\n      key: 'checkWhitespaceRanges',\n      value: function checkWhitespaceRanges(range, originalLength, string) {\n        var end = void 0,\n            valid = true,\n            max = string.length,\n            offset = originalLength - max,\n            start = parseInt(range.start, 10) - offset;\n        start = start > max ? max : start;\n        end = start + parseInt(range.length, 10);\n\n        if (end > max) {\n          end = max;\n          this.log('End range automatically set to the max value of ' + max);\n        }\n\n        if (start < 0 || end - start < 0 || start > max || end > max) {\n          valid = false;\n          this.log('Invalid range: ' + JSON.stringify(range));\n          this.opt.noMatch(range);\n        } else if (string.substring(start, end).replace(/\\s+/g, '') === '') {\n          valid = false;\n          this.log('Skipping whitespace only range: ' + JSON.stringify(range));\n          this.opt.noMatch(range);\n        }\n\n        return {\n          start: start,\n          end: end,\n          valid: valid\n        };\n      }\n    }, {\n      key: 'getTextNodes',\n      value: function getTextNodes(cb) {\n        var _this4 = this;\n\n        var val = '',\n            nodes = [];\n        this.iterator.forEachNode(NodeFilter.SHOW_TEXT, function (node) {\n          nodes.push({\n            start: val.length,\n            end: (val += node.textContent).length,\n            node: node\n          });\n        }, function (node) {\n          if (_this4.matchesExclude(node.parentNode)) {\n            return NodeFilter.FILTER_REJECT;\n          } else {\n            return NodeFilter.FILTER_ACCEPT;\n          }\n        }, function () {\n          cb({\n            value: val,\n            nodes: nodes\n          });\n        });\n      }\n    }, {\n      key: 'matchesExclude',\n      value: function matchesExclude(el) {\n        return DOMIterator.matches(el, this.opt.exclude.concat(['script', 'style', 'title', 'head', 'html']));\n      }\n    }, {\n      key: 'wrapRangeInTextNode',\n      value: function wrapRangeInTextNode(node, start, end) {\n        var hEl = !this.opt.element ? 'mark' : this.opt.element,\n            startNode = node.splitText(start),\n            ret = startNode.splitText(end - start);\n        var repl = document.createElement(hEl);\n        repl.setAttribute('data-markjs', 'true');\n\n        if (this.opt.className) {\n          repl.setAttribute('class', this.opt.className);\n        }\n\n        repl.textContent = startNode.textContent;\n        startNode.parentNode.replaceChild(repl, startNode);\n        return ret;\n      }\n    }, {\n      key: 'wrapRangeInMappedTextNode',\n      value: function wrapRangeInMappedTextNode(dict, start, end, filterCb, eachCb) {\n        var _this5 = this;\n\n        dict.nodes.every(function (n, i) {\n          var sibl = dict.nodes[i + 1];\n\n          if (typeof sibl === 'undefined' || sibl.start > start) {\n            if (!filterCb(n.node)) {\n              return false;\n            }\n\n            var s = start - n.start,\n                e = (end > n.end ? n.end : end) - n.start,\n                startStr = dict.value.substr(0, n.start),\n                endStr = dict.value.substr(e + n.start);\n            n.node = _this5.wrapRangeInTextNode(n.node, s, e);\n            dict.value = startStr + endStr;\n            dict.nodes.forEach(function (k, j) {\n              if (j >= i) {\n                if (dict.nodes[j].start > 0 && j !== i) {\n                  dict.nodes[j].start -= e;\n                }\n\n                dict.nodes[j].end -= e;\n              }\n            });\n            end -= e;\n            eachCb(n.node.previousSibling, n.start);\n\n            if (end > n.end) {\n              start = n.end;\n            } else {\n              return false;\n            }\n          }\n\n          return true;\n        });\n      }\n    }, {\n      key: 'wrapMatches',\n      value: function wrapMatches(regex, ignoreGroups, filterCb, eachCb, endCb) {\n        var _this6 = this;\n\n        var matchIdx = ignoreGroups === 0 ? 0 : ignoreGroups + 1;\n        this.getTextNodes(function (dict) {\n          dict.nodes.forEach(function (node) {\n            node = node.node;\n            var match = void 0;\n\n            while ((match = regex.exec(node.textContent)) !== null && match[matchIdx] !== '') {\n              if (!filterCb(match[matchIdx], node)) {\n                continue;\n              }\n\n              var pos = match.index;\n\n              if (matchIdx !== 0) {\n                for (var i = 1; i < matchIdx; i++) {\n                  pos += match[i].length;\n                }\n              }\n\n              node = _this6.wrapRangeInTextNode(node, pos, pos + match[matchIdx].length);\n              eachCb(node.previousSibling);\n              regex.lastIndex = 0;\n            }\n          });\n          endCb();\n        });\n      }\n    }, {\n      key: 'wrapMatchesAcrossElements',\n      value: function wrapMatchesAcrossElements(regex, ignoreGroups, filterCb, eachCb, endCb) {\n        var _this7 = this;\n\n        var matchIdx = ignoreGroups === 0 ? 0 : ignoreGroups + 1;\n        this.getTextNodes(function (dict) {\n          var match = void 0;\n\n          while ((match = regex.exec(dict.value)) !== null && match[matchIdx] !== '') {\n            var start = match.index;\n\n            if (matchIdx !== 0) {\n              for (var i = 1; i < matchIdx; i++) {\n                start += match[i].length;\n              }\n            }\n\n            var end = start + match[matchIdx].length;\n\n            _this7.wrapRangeInMappedTextNode(dict, start, end, function (node) {\n              return filterCb(match[matchIdx], node);\n            }, function (node, lastIndex) {\n              regex.lastIndex = lastIndex;\n              eachCb(node);\n            });\n          }\n\n          endCb();\n        });\n      }\n    }, {\n      key: 'wrapRangeFromIndex',\n      value: function wrapRangeFromIndex(ranges, filterCb, eachCb, endCb) {\n        var _this8 = this;\n\n        this.getTextNodes(function (dict) {\n          var originalLength = dict.value.length;\n          ranges.forEach(function (range, counter) {\n            var _checkWhitespaceRange = _this8.checkWhitespaceRanges(range, originalLength, dict.value),\n                start = _checkWhitespaceRange.start,\n                end = _checkWhitespaceRange.end,\n                valid = _checkWhitespaceRange.valid;\n\n            if (valid) {\n              _this8.wrapRangeInMappedTextNode(dict, start, end, function (node) {\n                return filterCb(node, range, dict.value.substring(start, end), counter);\n              }, function (node) {\n                eachCb(node, range);\n              });\n            }\n          });\n          endCb();\n        });\n      }\n    }, {\n      key: 'unwrapMatches',\n      value: function unwrapMatches(node) {\n        var parent = node.parentNode;\n        var docFrag = document.createDocumentFragment();\n\n        while (node.firstChild) {\n          docFrag.appendChild(node.removeChild(node.firstChild));\n        }\n\n        parent.replaceChild(docFrag, node);\n\n        if (!this.ie) {\n          parent.normalize();\n        } else {\n          this.normalizeTextNode(parent);\n        }\n      }\n    }, {\n      key: 'normalizeTextNode',\n      value: function normalizeTextNode(node) {\n        if (!node) {\n          return;\n        }\n\n        if (node.nodeType === 3) {\n          while (node.nextSibling && node.nextSibling.nodeType === 3) {\n            node.nodeValue += node.nextSibling.nodeValue;\n            node.parentNode.removeChild(node.nextSibling);\n          }\n        } else {\n          this.normalizeTextNode(node.firstChild);\n        }\n\n        this.normalizeTextNode(node.nextSibling);\n      }\n    }, {\n      key: 'markRegExp',\n      value: function markRegExp(regexp, opt) {\n        var _this9 = this;\n\n        this.opt = opt;\n        this.log('Searching with expression \"' + regexp + '\"');\n        var totalMatches = 0,\n            fn = 'wrapMatches';\n\n        var eachCb = function eachCb(element) {\n          totalMatches++;\n\n          _this9.opt.each(element);\n        };\n\n        if (this.opt.acrossElements) {\n          fn = 'wrapMatchesAcrossElements';\n        }\n\n        this[fn](regexp, this.opt.ignoreGroups, function (match, node) {\n          return _this9.opt.filter(node, match, totalMatches);\n        }, eachCb, function () {\n          if (totalMatches === 0) {\n            _this9.opt.noMatch(regexp);\n          }\n\n          _this9.opt.done(totalMatches);\n        });\n      }\n    }, {\n      key: 'mark',\n      value: function mark(sv, opt) {\n        var _this10 = this;\n\n        this.opt = opt;\n        var totalMatches = 0,\n            fn = 'wrapMatches';\n\n        var _getSeparatedKeywords = this.getSeparatedKeywords(typeof sv === 'string' ? [sv] : sv),\n            kwArr = _getSeparatedKeywords.keywords,\n            kwArrLen = _getSeparatedKeywords.length,\n            sens = this.opt.caseSensitive ? '' : 'i',\n            handler = function handler(kw) {\n          var regex = new RegExp(_this10.createRegExp(kw), 'gm' + sens),\n              matches = 0;\n\n          _this10.log('Searching with expression \"' + regex + '\"');\n\n          _this10[fn](regex, 1, function (term, node) {\n            return _this10.opt.filter(node, kw, totalMatches, matches);\n          }, function (element) {\n            matches++;\n            totalMatches++;\n\n            _this10.opt.each(element);\n          }, function () {\n            if (matches === 0) {\n              _this10.opt.noMatch(kw);\n            }\n\n            if (kwArr[kwArrLen - 1] === kw) {\n              _this10.opt.done(totalMatches);\n            } else {\n              handler(kwArr[kwArr.indexOf(kw) + 1]);\n            }\n          });\n        };\n\n        if (this.opt.acrossElements) {\n          fn = 'wrapMatchesAcrossElements';\n        }\n\n        if (kwArrLen === 0) {\n          this.opt.done(totalMatches);\n        } else {\n          handler(kwArr[0]);\n        }\n      }\n    }, {\n      key: 'markRanges',\n      value: function markRanges(rawRanges, opt) {\n        var _this11 = this;\n\n        this.opt = opt;\n        var totalMatches = 0,\n            ranges = this.checkRanges(rawRanges);\n\n        if (ranges && ranges.length) {\n          this.log('Starting to mark with the following ranges: ' + JSON.stringify(ranges));\n          this.wrapRangeFromIndex(ranges, function (node, range, match, counter) {\n            return _this11.opt.filter(node, range, match, counter);\n          }, function (element, range) {\n            totalMatches++;\n\n            _this11.opt.each(element, range);\n          }, function () {\n            _this11.opt.done(totalMatches);\n          });\n        } else {\n          this.opt.done(totalMatches);\n        }\n      }\n    }, {\n      key: 'unmark',\n      value: function unmark(opt) {\n        var _this12 = this;\n\n        this.opt = opt;\n        var sel = this.opt.element ? this.opt.element : '*';\n        sel += '[data-markjs]';\n\n        if (this.opt.className) {\n          sel += '.' + this.opt.className;\n        }\n\n        this.log('Removal selector \"' + sel + '\"');\n        this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT, function (node) {\n          _this12.unwrapMatches(node);\n        }, function (node) {\n          var matchesSel = DOMIterator.matches(node, sel),\n              matchesExclude = _this12.matchesExclude(node);\n\n          if (!matchesSel || matchesExclude) {\n            return NodeFilter.FILTER_REJECT;\n          } else {\n            return NodeFilter.FILTER_ACCEPT;\n          }\n        }, this.opt.done);\n      }\n    }, {\n      key: 'opt',\n      set: function set$$1(val) {\n        this._opt = _extends({}, {\n          'element': '',\n          'className': '',\n          'exclude': [],\n          'iframes': false,\n          'iframesTimeout': 5000,\n          'separateWordSearch': true,\n          'diacritics': true,\n          'synonyms': {},\n          'accuracy': 'partially',\n          'acrossElements': false,\n          'caseSensitive': false,\n          'ignoreJoiners': false,\n          'ignoreGroups': 0,\n          'ignorePunctuation': [],\n          'wildcards': 'disabled',\n          'each': function each() {},\n          'noMatch': function noMatch() {},\n          'filter': function filter() {\n            return true;\n          },\n          'done': function done() {},\n          'debug': false,\n          'log': window.console\n        }, val);\n      },\n      get: function get$$1() {\n        return this._opt;\n      }\n    }, {\n      key: 'iterator',\n      get: function get$$1() {\n        return new DOMIterator(this.ctx, this.opt.iframes, this.opt.exclude, this.opt.iframesTimeout);\n      }\n    }]);\n    return Mark;\n  }();\n\n  function Mark(ctx) {\n    var _this = this;\n\n    var instance = new Mark$1(ctx);\n\n    this.mark = function (sv, opt) {\n      instance.mark(sv, opt);\n      return _this;\n    };\n\n    this.markRegExp = function (sv, opt) {\n      instance.markRegExp(sv, opt);\n      return _this;\n    };\n\n    this.markRanges = function (sv, opt) {\n      instance.markRanges(sv, opt);\n      return _this;\n    };\n\n    this.unmark = function (opt) {\n      instance.unmark(opt);\n      return _this;\n    };\n\n    return this;\n  }\n\n  return Mark;\n});","map":null,"metadata":{},"sourceType":"script"}