{"ast":null,"code":"\"use strict\";\n\nvar ono = require(\"ono\"),\n    url = require(\"./util/url\"),\n    plugins = require(\"./util/plugins\");\n\nmodule.exports = parse;\n/**\n * Reads and parses the specified file path or URL.\n *\n * @param {string} path - This path MUST already be resolved, since `read` doesn't know the resolution context\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents, NOT the raw (Buffer) contents.\n */\n\nfunction parse(path, $refs, options) {\n  try {\n    // Remove the URL fragment, if any\n    path = url.stripHash(path); // Add a new $Ref for this file, even though we don't have the value yet.\n    // This ensures that we don't simultaneously read & parse the same file multiple times\n\n    var $ref = $refs._add(path); // This \"file object\" will be passed to all resolvers and parsers.\n\n\n    var file = {\n      url: path,\n      extension: url.getExtension(path)\n    }; // Read the file and then parse the data\n\n    return readFile(file, options).then(function (resolver) {\n      $ref.pathType = resolver.plugin.name;\n      file.data = resolver.result;\n      return parseFile(file, options);\n    }).then(function (parser) {\n      $ref.value = parser.result;\n      return parser.result;\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Reads the given file, using the configured resolver plugins\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the raw file contents and the resolver that was used.\n */\n\n\nfunction readFile(file, options) {\n  return new Promise(function (resolve, reject) {\n    // console.log('Reading %s', file.url);\n    // Find the resolvers that can read this file\n    var resolvers = plugins.all(options.resolve);\n    resolvers = plugins.filter(resolvers, \"canRead\", file); // Run the resolvers, in order, until one of them succeeds\n\n    plugins.sort(resolvers);\n    plugins.run(resolvers, \"read\", file).then(resolve, onError);\n\n    function onError(err) {\n      // Throw the original error, if it's one of our own (user-friendly) errors.\n      // Otherwise, throw a generic, friendly error.\n      if (err && !(err instanceof SyntaxError)) {\n        reject(err);\n      } else {\n        reject(ono.syntax('Unable to resolve $ref pointer \"%s\"', file.url));\n      }\n    }\n  });\n}\n/**\n * Parses the given file's contents, using the configured parser plugins.\n *\n * @param {object} file           - An object containing information about the referenced file\n * @param {string} file.url       - The full URL of the referenced file\n * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n * @param {$RefParserOptions} options\n *\n * @returns {Promise}\n * The promise resolves with the parsed file contents and the parser that was used.\n */\n\n\nfunction parseFile(file, options) {\n  return new Promise(function (resolve, reject) {\n    // console.log('Parsing %s', file.url);\n    // Find the parsers that can read this file type.\n    // If none of the parsers are an exact match for this file, then we'll try ALL of them.\n    // This handles situations where the file IS a supported type, just with an unknown extension.\n    var allParsers = plugins.all(options.parse);\n    var filteredParsers = plugins.filter(allParsers, \"canParse\", file);\n    var parsers = filteredParsers.length > 0 ? filteredParsers : allParsers; // Run the parsers, in order, until one of them succeeds\n\n    plugins.sort(parsers);\n    plugins.run(parsers, \"parse\", file).then(onParsed, onError);\n\n    function onParsed(parser) {\n      if (!parser.plugin.allowEmpty && isEmpty(parser.result)) {\n        reject(ono.syntax('Error parsing \"%s\" as %s. \\nParsed value is empty', file.url, parser.plugin.name));\n      } else {\n        resolve(parser);\n      }\n    }\n\n    function onError(err) {\n      if (err) {\n        err = err instanceof Error ? err : new Error(err);\n        reject(ono.syntax(err, \"Error parsing %s\", file.url));\n      } else {\n        reject(ono.syntax(\"Unable to parse %s\", file.url));\n      }\n    }\n  });\n}\n/**\n * Determines whether the parsed value is \"empty\".\n *\n * @param {*} value\n * @returns {boolean}\n */\n\n\nfunction isEmpty(value) {\n  return value === undefined || typeof value === \"object\" && Object.keys(value).length === 0 || typeof value === \"string\" && value.trim().length === 0 || Buffer.isBuffer(value) && value.length === 0;\n}","map":null,"metadata":{},"sourceType":"script"}