{"ast":null,"code":"var fs = require('fs'),\n    WritableStream = require('stream').Writable || require('readable-stream').Writable,\n    inherits = require('util').inherits;\n\nvar parseParams = require('./utils').parseParams;\n\nfunction Busboy(opts) {\n  if (!(this instanceof Busboy)) return new Busboy(opts);\n  if (opts.highWaterMark !== undefined) WritableStream.call(this, {\n    highWaterMark: opts.highWaterMark\n  });else WritableStream.call(this);\n  this._done = false;\n  this._parser = undefined;\n  this._finished = false;\n  this.opts = opts;\n  if (opts.headers && typeof opts.headers['content-type'] === 'string') this.parseHeaders(opts.headers);else throw new Error('Missing Content-Type');\n}\n\ninherits(Busboy, WritableStream);\n\nBusboy.prototype.emit = function (ev) {\n  if (ev === 'finish') {\n    if (!this._done) {\n      this._parser && this._parser.end();\n      return;\n    } else if (this._finished) {\n      return;\n    }\n\n    this._finished = true;\n  }\n\n  WritableStream.prototype.emit.apply(this, arguments);\n};\n\nBusboy.prototype.parseHeaders = function (headers) {\n  this._parser = undefined;\n\n  if (headers['content-type']) {\n    var parsed = parseParams(headers['content-type']),\n        matched,\n        type;\n\n    for (var i = 0; i < TYPES.length; ++i) {\n      type = TYPES[i];\n      if (typeof type.detect === 'function') matched = type.detect(parsed);else matched = type.detect.test(parsed[0]);\n      if (matched) break;\n    }\n\n    if (matched) {\n      var cfg = {\n        limits: this.opts.limits,\n        headers: headers,\n        parsedConType: parsed,\n        highWaterMark: undefined,\n        fileHwm: undefined,\n        defCharset: undefined,\n        preservePath: false\n      };\n      if (this.opts.highWaterMark) cfg.highWaterMark = this.opts.highWaterMark;\n      if (this.opts.fileHwm) cfg.fileHwm = this.opts.fileHwm;\n      cfg.defCharset = this.opts.defCharset;\n      cfg.preservePath = this.opts.preservePath;\n      this._parser = type(this, cfg);\n      return;\n    }\n  }\n\n  throw new Error('Unsupported content type: ' + headers['content-type']);\n};\n\nBusboy.prototype._write = function (chunk, encoding, cb) {\n  if (!this._parser) return cb(new Error('Not ready to parse. Missing Content-Type?'));\n\n  this._parser.write(chunk, cb);\n};\n\nvar TYPES = [require('./types/multipart'), require('./types/urlencoded')];\nmodule.exports = Busboy;","map":null,"metadata":{},"sourceType":"script"}