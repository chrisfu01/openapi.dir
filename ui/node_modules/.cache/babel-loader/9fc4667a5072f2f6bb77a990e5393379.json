{"ast":null,"code":"var is = require('type-is');\n\nvar Busboy = require('busboy');\n\nvar extend = require('xtend');\n\nvar onFinished = require('on-finished');\n\nvar appendField = require('append-field');\n\nvar Counter = require('./counter');\n\nvar MulterError = require('./multer-error');\n\nvar FileAppender = require('./file-appender');\n\nvar removeUploadedFiles = require('./remove-uploaded-files');\n\nfunction drainStream(stream) {\n  stream.on('readable', stream.read.bind(stream));\n}\n\nfunction makeMiddleware(setup) {\n  return function multerMiddleware(req, res, next) {\n    if (!is(req, ['multipart'])) return next();\n    var options = setup();\n    var limits = options.limits;\n    var storage = options.storage;\n    var fileFilter = options.fileFilter;\n    var fileStrategy = options.fileStrategy;\n    var preservePath = options.preservePath;\n    req.body = Object.create(null);\n    var busboy;\n\n    try {\n      busboy = new Busboy({\n        headers: req.headers,\n        limits: limits,\n        preservePath: preservePath\n      });\n    } catch (err) {\n      return next(err);\n    }\n\n    var appender = new FileAppender(fileStrategy, req);\n    var isDone = false;\n    var readFinished = false;\n    var errorOccured = false;\n    var pendingWrites = new Counter();\n    var uploadedFiles = [];\n\n    function done(err) {\n      if (isDone) return;\n      isDone = true;\n      req.unpipe(busboy);\n      drainStream(req);\n      busboy.removeAllListeners();\n      onFinished(req, function () {\n        next(err);\n      });\n    }\n\n    function indicateDone() {\n      if (readFinished && pendingWrites.isZero() && !errorOccured) done();\n    }\n\n    function abortWithError(uploadError) {\n      if (errorOccured) return;\n      errorOccured = true;\n      pendingWrites.onceZero(function () {\n        function remove(file, cb) {\n          storage._removeFile(req, file, cb);\n        }\n\n        removeUploadedFiles(uploadedFiles, remove, function (err, storageErrors) {\n          if (err) return done(err);\n          uploadError.storageErrors = storageErrors;\n          done(uploadError);\n        });\n      });\n    }\n\n    function abortWithCode(code, optionalField) {\n      abortWithError(new MulterError(code, optionalField));\n    } // handle text field data\n\n\n    busboy.on('field', function (fieldname, value, fieldnameTruncated, valueTruncated) {\n      if (fieldnameTruncated) return abortWithCode('LIMIT_FIELD_KEY');\n      if (valueTruncated) return abortWithCode('LIMIT_FIELD_VALUE', fieldname); // Work around bug in Busboy (https://github.com/mscdex/busboy/issues/6)\n\n      if (limits && limits.hasOwnProperty('fieldNameSize')) {\n        if (fieldname.length > limits.fieldNameSize) return abortWithCode('LIMIT_FIELD_KEY');\n      }\n\n      appendField(req.body, fieldname, value);\n    }); // handle files\n\n    busboy.on('file', function (fieldname, fileStream, filename, encoding, mimetype) {\n      // don't attach to the files object, if there is no file\n      if (!filename) return fileStream.resume(); // Work around bug in Busboy (https://github.com/mscdex/busboy/issues/6)\n\n      if (limits && limits.hasOwnProperty('fieldNameSize')) {\n        if (fieldname.length > limits.fieldNameSize) return abortWithCode('LIMIT_FIELD_KEY');\n      }\n\n      var file = {\n        fieldname: fieldname,\n        originalname: filename,\n        encoding: encoding,\n        mimetype: mimetype\n      };\n      var placeholder = appender.insertPlaceholder(file);\n      fileFilter(req, file, function (err, includeFile) {\n        if (err) {\n          appender.removePlaceholder(placeholder);\n          return abortWithError(err);\n        }\n\n        if (!includeFile) {\n          appender.removePlaceholder(placeholder);\n          return fileStream.resume();\n        }\n\n        var aborting = false;\n        pendingWrites.increment();\n        Object.defineProperty(file, 'stream', {\n          configurable: true,\n          enumerable: false,\n          value: fileStream\n        });\n        fileStream.on('error', function (err) {\n          pendingWrites.decrement();\n          abortWithError(err);\n        });\n        fileStream.on('limit', function () {\n          aborting = true;\n          abortWithCode('LIMIT_FILE_SIZE', fieldname);\n        });\n\n        storage._handleFile(req, file, function (err, info) {\n          if (aborting) {\n            appender.removePlaceholder(placeholder);\n            uploadedFiles.push(extend(file, info));\n            return pendingWrites.decrement();\n          }\n\n          if (err) {\n            appender.removePlaceholder(placeholder);\n            pendingWrites.decrement();\n            return abortWithError(err);\n          }\n\n          var fileInfo = extend(file, info);\n          appender.replacePlaceholder(placeholder, fileInfo);\n          uploadedFiles.push(fileInfo);\n          pendingWrites.decrement();\n          indicateDone();\n        });\n      });\n    });\n    busboy.on('error', function (err) {\n      abortWithError(err);\n    });\n    busboy.on('partsLimit', function () {\n      abortWithCode('LIMIT_PART_COUNT');\n    });\n    busboy.on('filesLimit', function () {\n      abortWithCode('LIMIT_FILE_COUNT');\n    });\n    busboy.on('fieldsLimit', function () {\n      abortWithCode('LIMIT_FIELD_COUNT');\n    });\n    busboy.on('finish', function () {\n      readFinished = true;\n      indicateDone();\n    });\n    req.pipe(busboy);\n  };\n}\n\nmodule.exports = makeMiddleware;","map":null,"metadata":{},"sourceType":"script"}