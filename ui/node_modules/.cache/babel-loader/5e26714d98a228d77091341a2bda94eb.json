{"ast":null,"code":"function valueType(value) {\n  if (value === undefined) return 'undefined';\n  if (Array.isArray(value)) return 'array';\n  if (typeof value === 'object') return 'object';\n  return 'scalar';\n}\n\nfunction setLastValue(context, step, currentValue, entryValue) {\n  switch (valueType(currentValue)) {\n    case 'undefined':\n      if (step.append) {\n        context[step.key] = [entryValue];\n      } else {\n        context[step.key] = entryValue;\n      }\n\n      break;\n\n    case 'array':\n      context[step.key].push(entryValue);\n      break;\n\n    case 'object':\n      return setLastValue(currentValue, {\n        type: 'object',\n        key: '',\n        last: true\n      }, currentValue[''], entryValue);\n\n    case 'scalar':\n      context[step.key] = [context[step.key], entryValue];\n      break;\n  }\n\n  return context;\n}\n\nfunction setValue(context, step, currentValue, entryValue) {\n  if (step.last) return setLastValue(context, step, currentValue, entryValue);\n  var obj;\n\n  switch (valueType(currentValue)) {\n    case 'undefined':\n      if (step.nextType === 'array') {\n        context[step.key] = [];\n      } else {\n        context[step.key] = Object.create(null);\n      }\n\n      return context[step.key];\n\n    case 'object':\n      return context[step.key];\n\n    case 'array':\n      if (step.nextType === 'array') {\n        return currentValue;\n      }\n\n      obj = Object.create(null);\n      context[step.key] = obj;\n      currentValue.forEach(function (item, i) {\n        if (item !== undefined) obj['' + i] = item;\n      });\n      return obj;\n\n    case 'scalar':\n      obj = Object.create(null);\n      obj[''] = currentValue;\n      context[step.key] = obj;\n      return obj;\n  }\n}\n\nmodule.exports = setValue;","map":null,"metadata":{},"sourceType":"script"}