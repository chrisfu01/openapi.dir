{"ast":null,"code":"/*!\n * Stickyfill -- `position: sticky` polyfill\n * v. 1.1.1 | https://github.com/wilddeer/stickyfill\n * Copyright Oleg Korsunsky | http://wd.dizaina.net/\n *\n * MIT License\n */\nmodule.exports = function (doc, win) {\n  if (!doc) {\n    doc = document;\n  }\n\n  if (!win) {\n    win = window;\n  }\n\n  var watchArray = [],\n      scroll,\n      initialized = false,\n      html = doc.documentElement,\n      noop = function noop() {},\n      checkTimer,\n      //visibility API strings\n  hiddenPropertyName = 'hidden',\n      visibilityChangeEventName = 'visibilitychange'; //fallback to prefixed names in old webkit browsers\n\n\n  if (doc.webkitHidden !== undefined) {\n    hiddenPropertyName = 'webkitHidden';\n    visibilityChangeEventName = 'webkitvisibilitychange';\n  } //test getComputedStyle\n\n\n  if (!win.getComputedStyle) {\n    seppuku();\n  } //test for native support\n\n\n  var prefixes = ['', '-webkit-', '-moz-', '-ms-'],\n      block = document.createElement('div');\n\n  for (var i = prefixes.length - 1; i >= 0; i--) {\n    try {\n      block.style.position = prefixes[i] + 'sticky';\n    } catch (e) {}\n\n    if (block.style.position != '') {\n      seppuku();\n    }\n  }\n\n  updateScrollPos(); //commit seppuku!\n\n  function seppuku() {\n    init = add = rebuild = pause = stop = kill = noop;\n  }\n\n  function mergeObjects(targetObj, sourceObject) {\n    for (key in sourceObject) {\n      if (sourceObject.hasOwnProperty(key)) {\n        targetObj[key] = sourceObject[key];\n      }\n    }\n  }\n\n  function parseNumeric(val) {\n    return parseFloat(val) || 0;\n  }\n\n  function updateScrollPos() {\n    scroll = {\n      top: win.pageYOffset,\n      left: win.pageXOffset\n    };\n  }\n\n  function onScroll() {\n    if (win.pageXOffset != scroll.left) {\n      updateScrollPos();\n      rebuild();\n      return;\n    }\n\n    if (win.pageYOffset != scroll.top) {\n      updateScrollPos();\n      recalcAllPos();\n    }\n  } //fixes flickering\n\n\n  function onWheel(event) {\n    setTimeout(function () {\n      if (win.pageYOffset != scroll.top) {\n        scroll.top = win.pageYOffset;\n        recalcAllPos();\n      }\n    }, 0);\n  }\n\n  function recalcAllPos() {\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      recalcElementPos(watchArray[i]);\n    }\n  }\n\n  function recalcElementPos(el) {\n    if (!el.inited) return;\n    var currentMode = scroll.top <= el.limit.start ? 0 : scroll.top >= el.limit.end ? 2 : 1;\n\n    if (el.mode != currentMode) {\n      switchElementMode(el, currentMode);\n    }\n  } //checks whether stickies start or stop positions have changed\n\n\n  function fastCheck() {\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      if (!watchArray[i].inited) continue;\n      var deltaTop = Math.abs(getDocOffsetTop(watchArray[i].clone) - watchArray[i].docOffsetTop),\n          deltaHeight = Math.abs(watchArray[i].parent.node.offsetHeight - watchArray[i].parent.height);\n      if (deltaTop >= 2 || deltaHeight >= 2) return false;\n    }\n\n    return true;\n  }\n\n  function initElement(el) {\n    if (isNaN(parseFloat(el.computed.top)) || el.isCell) return;\n    el.inited = true;\n    if (!el.clone) clone(el);\n    if (el.parent.computed.position != 'absolute' && el.parent.computed.position != 'relative') el.parent.node.style.position = 'relative';\n    recalcElementPos(el);\n    el.parent.height = el.parent.node.offsetHeight;\n    el.docOffsetTop = getDocOffsetTop(el.clone);\n  }\n\n  function deinitElement(el) {\n    var deinitParent = true;\n    el.clone && killClone(el);\n    mergeObjects(el.node.style, el.css); //check whether element's parent is used by other stickies\n\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      if (watchArray[i].node !== el.node && watchArray[i].parent.node === el.parent.node) {\n        deinitParent = false;\n        break;\n      }\n    }\n\n    ;\n    if (deinitParent) el.parent.node.style.position = el.parent.css.position;\n    el.mode = -1;\n  }\n\n  function initAll() {\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      initElement(watchArray[i]);\n    }\n  }\n\n  function deinitAll() {\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      deinitElement(watchArray[i]);\n    }\n  }\n\n  function switchElementMode(el, mode) {\n    var nodeStyle = el.node.style;\n\n    switch (mode) {\n      case 0:\n        nodeStyle.position = 'absolute';\n        nodeStyle.left = el.offset.left + 'px';\n        nodeStyle.right = el.offset.right + 'px';\n        nodeStyle.top = el.offset.top + 'px';\n        nodeStyle.bottom = 'auto';\n        nodeStyle.width = 'auto';\n        nodeStyle.marginLeft = 0;\n        nodeStyle.marginRight = 0;\n        nodeStyle.marginTop = 0;\n        break;\n\n      case 1:\n        nodeStyle.position = 'fixed';\n        nodeStyle.left = el.box.left + 'px';\n        nodeStyle.right = el.box.right + 'px';\n        nodeStyle.top = el.css.top;\n        nodeStyle.bottom = 'auto';\n        nodeStyle.width = 'auto';\n        nodeStyle.marginLeft = 0;\n        nodeStyle.marginRight = 0;\n        nodeStyle.marginTop = 0;\n        break;\n\n      case 2:\n        nodeStyle.position = 'absolute';\n        nodeStyle.left = el.offset.left + 'px';\n        nodeStyle.right = el.offset.right + 'px';\n        nodeStyle.top = 'auto';\n        nodeStyle.bottom = 0;\n        nodeStyle.width = 'auto';\n        nodeStyle.marginLeft = 0;\n        nodeStyle.marginRight = 0;\n        break;\n    }\n\n    el.mode = mode;\n  }\n\n  function clone(el) {\n    el.clone = document.createElement('div');\n    var refElement = el.node.nextSibling || el.node,\n        cloneStyle = el.clone.style;\n    cloneStyle.height = el.height + 'px';\n    cloneStyle.width = el.width + 'px';\n    cloneStyle.marginTop = el.computed.marginTop;\n    cloneStyle.marginBottom = el.computed.marginBottom;\n    cloneStyle.marginLeft = el.computed.marginLeft;\n    cloneStyle.marginRight = el.computed.marginRight;\n    cloneStyle.padding = cloneStyle.border = cloneStyle.borderSpacing = 0;\n    cloneStyle.fontSize = '1em';\n    cloneStyle.position = 'static';\n    cloneStyle.cssFloat = el.computed.cssFloat;\n    el.node.parentNode.insertBefore(el.clone, refElement);\n  }\n\n  function killClone(el) {\n    el.clone.parentNode.removeChild(el.clone);\n    el.clone = undefined;\n  }\n\n  function getElementParams(node) {\n    var computedStyle = getComputedStyle(node),\n        parentNode = node.parentNode,\n        parentComputedStyle = getComputedStyle(parentNode),\n        cachedPosition = node.style.position;\n    node.style.position = 'relative';\n    var computed = {\n      top: computedStyle.top,\n      marginTop: computedStyle.marginTop,\n      marginBottom: computedStyle.marginBottom,\n      marginLeft: computedStyle.marginLeft,\n      marginRight: computedStyle.marginRight,\n      cssFloat: computedStyle.cssFloat\n    },\n        numeric = {\n      top: parseNumeric(computedStyle.top),\n      marginBottom: parseNumeric(computedStyle.marginBottom),\n      paddingLeft: parseNumeric(computedStyle.paddingLeft),\n      paddingRight: parseNumeric(computedStyle.paddingRight),\n      borderLeftWidth: parseNumeric(computedStyle.borderLeftWidth),\n      borderRightWidth: parseNumeric(computedStyle.borderRightWidth)\n    };\n    node.style.position = cachedPosition;\n    var css = {\n      position: node.style.position,\n      top: node.style.top,\n      bottom: node.style.bottom,\n      left: node.style.left,\n      right: node.style.right,\n      width: node.style.width,\n      marginTop: node.style.marginTop,\n      marginLeft: node.style.marginLeft,\n      marginRight: node.style.marginRight\n    },\n        nodeOffset = getElementOffset(node),\n        parentOffset = getElementOffset(parentNode),\n        parent = {\n      node: parentNode,\n      css: {\n        position: parentNode.style.position\n      },\n      computed: {\n        position: parentComputedStyle.position\n      },\n      numeric: {\n        borderLeftWidth: parseNumeric(parentComputedStyle.borderLeftWidth),\n        borderRightWidth: parseNumeric(parentComputedStyle.borderRightWidth),\n        borderTopWidth: parseNumeric(parentComputedStyle.borderTopWidth),\n        borderBottomWidth: parseNumeric(parentComputedStyle.borderBottomWidth)\n      }\n    },\n        el = {\n      node: node,\n      box: {\n        left: nodeOffset.win.left,\n        right: html.clientWidth - nodeOffset.win.right\n      },\n      offset: {\n        top: nodeOffset.win.top - parentOffset.win.top - parent.numeric.borderTopWidth,\n        left: nodeOffset.win.left - parentOffset.win.left - parent.numeric.borderLeftWidth,\n        right: -nodeOffset.win.right + parentOffset.win.right - parent.numeric.borderRightWidth\n      },\n      css: css,\n      isCell: computedStyle.display == 'table-cell',\n      computed: computed,\n      numeric: numeric,\n      width: nodeOffset.win.right - nodeOffset.win.left,\n      height: nodeOffset.win.bottom - nodeOffset.win.top,\n      mode: -1,\n      inited: false,\n      parent: parent,\n      limit: {\n        start: nodeOffset.doc.top - numeric.top,\n        end: parentOffset.doc.top + parentNode.offsetHeight - parent.numeric.borderBottomWidth - node.offsetHeight - numeric.top - numeric.marginBottom\n      }\n    };\n    return el;\n  }\n\n  function getDocOffsetTop(node) {\n    var docOffsetTop = 0;\n\n    while (node) {\n      docOffsetTop += node.offsetTop;\n      node = node.offsetParent;\n    }\n\n    return docOffsetTop;\n  }\n\n  function getElementOffset(node) {\n    var box = node.getBoundingClientRect();\n    return {\n      doc: {\n        top: box.top + win.pageYOffset,\n        left: box.left + win.pageXOffset\n      },\n      win: box\n    };\n  }\n\n  function startFastCheckTimer() {\n    checkTimer = setInterval(function () {\n      !fastCheck() && rebuild();\n    }, 500);\n  }\n\n  function stopFastCheckTimer() {\n    clearInterval(checkTimer);\n  }\n\n  function handlePageVisibilityChange() {\n    if (!initialized) return;\n\n    if (document[hiddenPropertyName]) {\n      stopFastCheckTimer();\n    } else {\n      startFastCheckTimer();\n    }\n  }\n\n  function init() {\n    if (initialized) return;\n    updateScrollPos();\n    initAll();\n    win.addEventListener('scroll', onScroll);\n    win.addEventListener('wheel', onWheel); //watch for width changes\n\n    win.addEventListener('resize', rebuild);\n    win.addEventListener('orientationchange', rebuild); //watch for page visibility\n\n    doc.addEventListener(visibilityChangeEventName, handlePageVisibilityChange);\n    startFastCheckTimer();\n    initialized = true;\n  }\n\n  function rebuild() {\n    if (!initialized) return;\n    deinitAll();\n\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      watchArray[i] = getElementParams(watchArray[i].node);\n    }\n\n    initAll();\n  }\n\n  function pause() {\n    win.removeEventListener('scroll', onScroll);\n    win.removeEventListener('wheel', onWheel);\n    win.removeEventListener('resize', rebuild);\n    win.removeEventListener('orientationchange', rebuild);\n    doc.removeEventListener(visibilityChangeEventName, handlePageVisibilityChange);\n    stopFastCheckTimer();\n    initialized = false;\n  }\n\n  function stop() {\n    pause();\n    deinitAll();\n  }\n\n  function kill() {\n    stop(); //empty the array without loosing the references,\n    //the most performant method according to http://jsperf.com/empty-javascript-array\n\n    while (watchArray.length) {\n      watchArray.pop();\n    }\n  }\n\n  function add(node) {\n    //check if Stickyfill is already applied to the node\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      if (watchArray[i].node === node) return;\n    }\n\n    ;\n    var el = getElementParams(node);\n    watchArray.push(el);\n\n    if (!initialized) {\n      init();\n    } else {\n      initElement(el);\n    }\n  }\n\n  function remove(node) {\n    for (var i = watchArray.length - 1; i >= 0; i--) {\n      if (watchArray[i].node === node) {\n        deinitElement(watchArray[i]);\n        watchArray.splice(i, 1);\n      }\n    }\n\n    ;\n  } //expose Stickyfill\n\n\n  return {\n    stickies: watchArray,\n    add: add,\n    remove: remove,\n    init: init,\n    rebuild: rebuild,\n    pause: pause,\n    stop: stop,\n    kill: kill\n  };\n};","map":null,"metadata":{},"sourceType":"script"}